<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Latex语法（第一弹）</title>
      <link href="/2024/03/17/Latex%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/03/17/Latex%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Latex-语法">Latex 语法</h1><p>先简单整理下Latex的语法，以后会经常用到<br><a href="https://blog.csdn.net/ccnice99/article/details/127507471?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Latex%E8%AF%AD%E6%B3%95&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-127507471.142%5Ev99%5Epc_search_result_base6&amp;spm=1018.2226.3001.4449">【自用】【持续更新】LaTeX常用基础语法大全_latex语法-CSDN博客</a></p><h2 id="基础语法">基础语法</h2><h3 id="段落">段落</h3><h4 id="居中">居中</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line">要居中的内容</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure><h4 id="排序列表">排序列表</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 原始模板</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> 第一小题</span><br><span class="line"><span class="keyword">\item</span> 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"><span class="comment">% 自定义排序列表的编号形式</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;[(1)]</span><br><span class="line"><span class="keyword">\item</span> 第一小题</span><br><span class="line"><span class="keyword">\item</span> 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;[a.]</span><br><span class="line"><span class="keyword">\item</span> 第一小题</span><br><span class="line"><span class="keyword">\item</span> 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;[a)]</span><br><span class="line"><span class="keyword">\item</span> 第一小题</span><br><span class="line"><span class="keyword">\item</span> 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br><span class="line"><span class="comment">% 实心圆点列表</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> 第一小题</span><br><span class="line"><span class="keyword">\item</span> 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="comment">% 短横杠列表</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span>[-] 第一小题</span><br><span class="line"><span class="keyword">\item</span>[-] 第二小题</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文本、变量">文本、变量</h3><h4 id="加粗">加粗</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\textbf</span>&#123;A&#125;、<span class="keyword">\boldsymbol</span>&#123;A&#125;、<span class="keyword">\boldsymbol</span>&#123;我们&#125;、<span class="keyword">\textbf</span>&#123;我们&#125;、我们</span><br><span class="line">注意：boldsymbol会变斜体（可能仅限英文）</span><br></pre></td></tr></table></figure><p>$$<br>\textbf{A}、\boldsymbol{A}、\boldsymbol{我们}、\textbf{我们}、我们<br>$$</p><h4 id="斜体">斜体</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\textit&#123;我们&#125;、\it&#123;我们&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\textit{我们}、\it{我们}<br>$$</p><h4 id="向量（顶有向量箭头）">向量（顶有向量箭头）</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\vec</span> v</span><br></pre></td></tr></table></figure><p>$$<br>\vec v<br>$$</p><h4 id="估计（顶有尖头hat）">估计（顶有尖头hat）</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hat</span>&#123;y&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\hat{y}<br>$$</p><h4 id="平均（顶有横线）">平均（顶有横线）</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% \overline的线稍长，能覆盖所有字符</span></span><br><span class="line"><span class="keyword">\bar</span> x ，<span class="keyword">\overline</span> x，<span class="keyword">\bar</span>&#123;AB&#125; ，<span class="keyword">\overline</span>&#123;AB&#125;</span><br></pre></td></tr></table></figure><p>$$<br>% \overline的线稍长，能覆盖所有字符<br>\bar x ，\overline x，\bar{AB} ，\overline{AB}<br>$$</p><h4 id="顶有波浪号">顶有波浪号~</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% \widetilde能覆盖所有字符</span></span><br><span class="line"><span class="keyword">\tilde</span> x ，<span class="keyword">\widetilde</span> x，<span class="keyword">\tilde</span>&#123;AB&#125; ，<span class="keyword">\widetilde</span>&#123;AB&#125;</span><br></pre></td></tr></table></figure><p>$$<br>% \widetilde能覆盖所有字符<br>\tilde x ，\widetilde x，\tilde{AB} ，\widetilde{AB}<br>$$</p><h4 id="分式">分式</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\frac</span>&#123;分子&#125;&#123;分母&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\frac{分子}{分母}<br>$$</p><h4 id="24个希腊字母">24个希腊字母</h4><p><img src="https://img2.imgtp.com/2024/03/17/9AmVbzpN.png" alt=""></p><h4 id="花体、集合手写体">花体、集合手写体</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 花体</span></span><br><span class="line"><span class="keyword">\mathcal</span>&#123;X&#125; ，<span class="keyword">\mathcal</span>&#123;Y&#125; ，<span class="keyword">\mathcal</span>&#123;D&#125;</span><br><span class="line"><span class="comment">% 集合手写体</span></span><br><span class="line"><span class="keyword">\mathbb</span>&#123;N&#125; ，<span class="keyword">\mathbb</span>&#123;Z&#125; ，<span class="keyword">\mathbb</span>&#123;R&#125; ，<span class="keyword">\mathbb</span>&#123;C&#125; ，<span class="keyword">\mathbb</span>&#123;Q&#125;</span><br></pre></td></tr></table></figure><p>$$<br>% 花体<br>\mathcal{X} ，\mathcal{Y} ，\mathcal{D}<br>$$</p><p>$$<br>% 集合手写体<br>\mathbb{N} ，\mathbb{Z} ，\mathbb{R} ，\mathbb{C} ，\mathbb{Q}<br>$$</p><h3 id="大型运算">大型运算</h3><h4 id="求和">求和</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125;x<span class="built_in">_</span>i<span class="built_in">$</span>  <span class="params">#</span> 上下标在右边</span><br><span class="line"><span class="built_in">$</span><span class="keyword">\sum</span><span class="keyword">\limits</span><span class="built_in">_</span>&#123;i=1&#125;<span class="built_in">^</span>&#123;n&#125;x<span class="built_in">_</span>i<span class="built_in">$</span>  <span class="params">#</span> 上下标在正上、正下</span><br><span class="line"><span class="keyword">\\</span> 换行</span><br></pre></td></tr></table></figure><p>$$<br>\sum_{i=1}^{n}x_i<br>$$</p><p>$$<br>\sum\limits_{i=1}^{n}x_i<br>$$</p><p>求和符号的上下位置也可以缺省</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="keyword">\sum</span><span class="keyword">\limits</span><span class="built_in">_</span>i <span class="keyword">\sum</span><span class="keyword">\limits</span><span class="built_in">^</span>n<span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\sum\limits_i \sum\limits^n<br>$$</p><h3 id="数组矩阵">数组矩阵</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 无括号矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br><span class="line"><span class="comment">% 圆括号矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;pmatrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;pmatrix&#125;</span><br><span class="line"><span class="comment">% 单竖线矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;vmatrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;vmatrix&#125;</span><br><span class="line"><span class="comment">% 双竖线矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;Vmatrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;Vmatrix&#125;</span><br><span class="line"><span class="comment">% 方括号矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;bmatrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;bmatrix&#125;</span><br><span class="line"><span class="comment">% 花括号矩阵</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;Bmatrix&#125;</span><br><span class="line">-1 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span></span><br><span class="line">0 <span class="built_in">&amp;</span> 1 <span class="built_in">&amp;</span> 4<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;Bmatrix&#125;</span><br></pre></td></tr></table></figure><p>$$<br>% 无括号矩阵<br>\begin{matrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{matrix}<br>\<br>% 圆括号矩阵<br>\begin{pmatrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{pmatrix}<br>\<br>% 单竖线矩阵<br>\begin{vmatrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{vmatrix}<br>\<br>% 双竖线矩阵<br>\begin{Vmatrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{Vmatrix}<br>\<br>% 方括号矩阵<br>\begin{bmatrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{bmatrix}<br>\<br>% 花括号矩阵<br>\begin{Bmatrix}<br>-1 &amp; 1 &amp; 2\<br>0 &amp; 1 &amp; 4\<br>\end{Bmatrix}<br>$$</p><h3 id="符号">符号</h3><h4 id="属于">属于</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\in</span></span><br></pre></td></tr></table></figure><p>$$<br>\in<br>$$</p><h4 id="集合之间的各种运算关系">集合之间的各种运算关系</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">A<span class="keyword">\subset</span> B</span><br><span class="line">A<span class="keyword">\supset</span> B</span><br><span class="line">A<span class="keyword">\subseteq</span> B</span><br><span class="line">A<span class="keyword">\supseteq</span> B</span><br><span class="line">A<span class="keyword">\cap</span> B</span><br><span class="line">A<span class="keyword">\cup</span> B</span><br><span class="line"><span class="comment">% A减B</span></span><br><span class="line">A<span class="keyword">\setminus</span> B</span><br><span class="line"><span class="keyword">\emptyset</span></span><br></pre></td></tr></table></figure><p>$A\subset B$     $A\supset B$     $A\subseteq B$      $A\supseteq B$     $A\cap B$     $A\cup B$     $A\setminus B$     $\emptyset$</p><h4 id="任意">任意</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\forall</span></span><br></pre></td></tr></table></figure><p>$$<br>\forall<br>$$</p><h4 id="存在">存在</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\exists</span></span><br></pre></td></tr></table></figure><p>$$<br>\exists<br>$$</p><h4 id="因为、所以">因为、所以</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\because</span> 和 <span class="keyword">\therefore</span></span><br></pre></td></tr></table></figure><p>注意：如果没有编译成功，需要在导言区导入宏包amssymb</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\because 和 \therefore<br>$$</p><h4 id="无穷大">无穷大</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\infty</span>+<span class="keyword">\infty</span> -<span class="keyword">\infty</span></span><br></pre></td></tr></table></figure><p>$$<br>\infty +\infty -\infty<br>$$</p><h4 id="尖括号">尖括号</h4><p>注意与小于号&lt;，大于号&gt; 区别</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\langle</span></span><br><span class="line"><span class="keyword">\rangle</span></span><br></pre></td></tr></table></figure><p>$$<br>\langle<br>\<br>\rangle<br>$$</p><h4 id="小于等于、大于等于、不等于、恒等于、恒不等于">小于等于、大于等于、不等于、恒等于、恒不等于</h4><p>巧记：等于equation，所以这几个符号都是从 <em>eq</em> 词根出发的</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\le</span> 或者 <span class="keyword">\leq</span></span><br><span class="line"><span class="keyword">\ge</span> 或者 <span class="keyword">\geq</span></span><br><span class="line"><span class="keyword">\ne</span> 或者 <span class="keyword">\neq</span></span><br><span class="line"><span class="keyword">\equiv</span></span><br><span class="line"><span class="keyword">\not</span><span class="keyword">\equiv</span>  <span class="params">#</span> 注意这里只能是拼接<span class="keyword">\not</span>和<span class="keyword">\equiv</span>，<span class="keyword">\nequiv</span>无效</span><br></pre></td></tr></table></figure><p>$\le 或者 \leq$     $\ge 或者 \geq$     $\ne 或者 \neq$     $\equiv$     $\not\equiv$</p><h4 id="远小于、远大于">远小于、远大于</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\ll</span>，<span class="keyword">\gg</span></span><br></pre></td></tr></table></figure><p>$$<br>\ll，\gg<br>$$</p><h4 id="约等于">约等于</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\approx</span></span><br></pre></td></tr></table></figure><p>$$<br>\approx<br>$$</p><h4 id="向上取整、向下取整">向上取整、向下取整</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lceil</span> x <span class="keyword">\rceil</span></span><br><span class="line"><span class="keyword">\lfloor</span> x <span class="keyword">\rfloor</span></span><br></pre></td></tr></table></figure><p>$$<br>\lceil x \rceil<br>\<br>\lfloor x \rfloor<br>$$</p><h4 id="绝对值">绝对值</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\left</span>|-2<span class="keyword">\right</span>| 或者 <span class="keyword">\vert</span> -2<span class="keyword">\vert</span> 或者  <span class="keyword">\lvert</span> -2<span class="keyword">\rvert</span> </span><br></pre></td></tr></table></figure><p>可以观察一下区别<br>$$<br>\left|-2\right| 或者 \vert -2\vert 或者  \lvert -2\rvert<br>$$</p><h4 id="双竖线">双竖线</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\|</span> A<span class="keyword">\|</span> 或者 <span class="keyword">\left</span><span class="keyword">\|</span>A<span class="keyword">\right</span><span class="keyword">\|</span> 或者 <span class="keyword">\Vert</span> A<span class="keyword">\Vert</span></span><br></pre></td></tr></table></figure><p>$$<br>| A| 或者 \left|A\right| 或者 \Vert A\Vert<br>$$</p><h4 id="花括号">花括号</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\&#123;</span> A<span class="keyword">\&#125;</span> 或者 <span class="keyword">\left</span><span class="keyword">\&#123;</span> A <span class="keyword">\right</span><span class="keyword">\&#125;</span> </span><br></pre></td></tr></table></figure><p>$$<br>{ A} 或者 \left{ A \right}<br>$$</p><h4 id="乘号">乘号</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\times</span> 或者 ×</span><br></pre></td></tr></table></figure><p>$$<br>\times 或者 ×<br>$$</p><h4 id="开n次方">开n次方</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\sqrt</span>&#123;2&#125;、<span class="keyword">\sqrt</span>[4]&#123;16&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\sqrt{2}、\sqrt[4]{16}<br>$$</p><h4 id="导数">导数</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 求导</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;<span class="keyword">\mathrm</span>&#123;d&#125;y&#125;&#123;<span class="keyword">\mathrm</span>&#123;d&#125;x&#125;</span><br><span class="line"><span class="comment">% 高阶导</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;<span class="keyword">\mathrm</span>&#123;d&#125;<span class="built_in">^</span>&#123;n&#125; y&#125;&#123;<span class="keyword">\mathrm</span>&#123;d&#125;x<span class="built_in">^</span>&#123;n&#125;&#125;</span><br><span class="line"><span class="comment">% 求偏导</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;<span class="keyword">\partial</span>&#123;Loss&#125;&#125;&#123;<span class="keyword">\partial</span>&#123;w&#125;&#125;</span><br><span class="line"><span class="comment">% 二阶偏导</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;<span class="keyword">\partial</span><span class="built_in">^</span>&#123;2&#125;z&#125;&#123;<span class="keyword">\partial</span>&#123;x&#125;<span class="built_in">^</span>&#123;2&#125;&#125;</span><br><span class="line"><span class="keyword">\frac</span>&#123;<span class="keyword">\partial</span><span class="built_in">^</span>&#123;2&#125;z&#125;&#123;<span class="keyword">\partial</span>&#123;x&#125;<span class="keyword">\partial</span>&#123;y&#125;&#125;</span><br></pre></td></tr></table></figure><p>$$<br>% 求导<br>\frac{\mathrm{d}y}{\mathrm{d}x}<br>% 高阶导<br>\frac{\mathrm{d}^{n} y}{\mathrm{d}x^{n}}<br>% 求偏导<br>\frac{\partial{Loss}}{\partial{w}}<br>% 二阶偏导<br>\frac{\partial^{2}z}{\partial{x}^{2}}<br>\frac{\partial^{2}z}{\partial{x}\partial{y}}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex多重奏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和、差分、离散化</title>
      <link href="/2024/03/14/%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E3%80%81%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
      <url>/2024/03/14/%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E3%80%81%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="【深进1-例1】求区间和"><a href="https://www.luogu.com.cn/problem/P8218">【深进1.例1】求区间和</a></h1><blockquote><h1 id="【深进1-例1】求区间和-2">【深进1.例1】求区间和</h1><h2 id="题目描述">题目描述</h2><p>给定 $n$ 个正整数组成的数列 $a_1, a_2, \cdots, a_n$ 和 $m$ 个区间 $[l_i,r_i]$，分别求这<br>$m$ 个区间的区间和。</p><p>对于所有测试数据，$n,m\le10^5,a_i\le 10^4$</p><h2 id="输入格式">输入格式</h2><p>第一行，为一个正整数 $n$ 。</p><p>第二行，为 $n$ 个正整数 $a_1,a_2, \cdots ,a_n$</p><p>第三行，为一个正整数 $m$ 。</p><p>接下来 $m$ 行，每行为两个正整数 $l_i,r_i$ ，满足$1\le l_i\le r_i\le n$</p><h2 id="输出格式">输出格式</h2><p>共 $m$ 行。</p><p>第 $i$ 行为第 $i$ 组答案的询问。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>4 4 3 2 1 2 1 4 2 3 </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>10 5 </code></p><h2 id="提示">提示</h2><p>样例解释：第 $1$ 到第 $4$ 个数加起来和为 $10$。第 $2$ 个数到第 $3$ 个数加起来和为 $5$。</p><p>对于 $50 %$ 的数据：$n,m\le 1000$；</p><p>对于 $100 %$ 的数据：$1 \le n, m\le 10^5$，$1 \le a_i\le 10^4$</p></blockquote><h2 id="思路分析">思路分析</h2><p>简单的前缀和板子，不多说。</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll =<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ll n, m;</span><br><span class="line">ll a[<span class="number">200000</span>];</span><br><span class="line">ll pre[<span class="number">200000</span>], sum[<span class="number">200000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">pre[i] = a[i] + pre[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">ll l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">sum[i] = pre[r] - pre[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">cout &lt;&lt; sum[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最大加权矩形"><a href="https://www.luogu.com.cn/problem/P1719">最大加权矩形</a></h1><h2 id="题目描述-2">题目描述</h2><p>为了更好的备战 NOIP2013，电脑组的几个女孩子 LYQ,ZSC,ZHQ 认为，我们不光需要机房，我们还需要运动，于是就决定找校长申请一块电脑组的课余运动场地，听说她们都是电脑组的高手，校长没有马上答应他们，而是先给她们出了一道数学题，并且告诉她们：你们能获得的运动场地的面积就是你们能找到的这个最大的数字。</p><p>校长先给他们一个 $n\times n$ 矩阵。要求矩阵中最大加权矩形，即矩阵的每一个元素都有一权值，权值定义在整数集上。从中找一矩形，矩形大小无限制，是其中包含的所有元素的和最大 。矩阵的每个元素属于 $[-127,127]$ ,例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 0 –2 –7  0 </span><br><span class="line"> 9  2 –6  2</span><br><span class="line">-4  1 –4  1 </span><br><span class="line">-1  8  0 –2</span><br></pre></td></tr></table></figure><p>在左下角：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9  2</span><br><span class="line">-4  1</span><br><span class="line">-1  8</span><br></pre></td></tr></table></figure><p>和为 $15$。</p><p>几个女孩子有点犯难了，于是就找到了电脑组精打细算的 HZH，TZY 小朋友帮忙计算，但是遗憾的是他们的答案都不一样，涉及土地的事情我们可不能含糊，你能帮忙计算出校长所给的矩形中加权和最大的矩形吗？</p><h2 id="输入格式-2">输入格式</h2><p>第一行：$n$，接下来是 $n$ 行 $n$ 列的矩阵。</p><h2 id="输出格式-2">输出格式</h2><p>最大矩形（子矩阵）的和。</p><h2 id="样例-1-2">样例 #1</h2><h3 id="样例输入-1-2">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">0 -2 -7 0</span><br><span class="line"> 9 2 -6 2</span><br><span class="line">-4 1 -4  1 </span><br><span class="line">-1 8  0 -2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="提示-2">提示</h2><p>$1 \leq n\le 120$<br>其实是二维前缀和的板子，这里给出几份代码，看看不同的思路（大多都是细节上处理的方法不同）。</p><h2 id="AC代码-2">AC代码</h2><h3 id="CODE1">CODE1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">-99999999</span>;</span><br><span class="line"><span class="type">int</span> squ[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="type">int</span> lin[<span class="number">130</span>][<span class="number">130</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">cin &gt;&gt; squ[i][j];</span><br><span class="line"><span class="comment">//lin[i][j]表示的是第i行前j个（其实也就是第j列）数字的和</span></span><br><span class="line">lin[i][j] = lin[i][j - <span class="number">1</span>] + squ[i][j];</span><br><span class="line"><span class="comment">//sum[i][j]表示的是以第1行第1个数字为左上角，以第i行第j个数字为右下角的矩形的面积。</span></span><br><span class="line">sum[i][j] = sum[i - <span class="number">1</span>][j] + lin[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分别枚举左上角的坐标(x1,y1)和右下角(x2,y2)的坐标。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x1 = <span class="number">1</span>; x1 &lt;= n; x1++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y1 = <span class="number">1</span>; y1 &lt;= n; y1++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x2 = <span class="number">1</span>; x2 &lt;= n; x2++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y2 = <span class="number">1</span>; y2 &lt;= n; y2++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x2 &lt; x1||y2&lt;y1) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, sum[x2][y2] - sum[x2][y1 - <span class="number">1</span>] - sum[x1 - <span class="number">1</span>][y2] +sum[x1<span class="number">-1</span>][y1<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有人对$sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] +sum[x1-1][y1-1]$为什么是以$(x_1,y_1)$为左上角，以$(x_2,y_2)$为右下角的矩形的面积有点疑惑。画个图解释一下：<br><img src="https://img-blog.csdnimg.cn/direct/3c6c29a63e80437eaf7b54057daf5860.png#pic_center" alt="在这里插入图片描述"><br>这下应该能看懂了吧qwq。</p><h3 id="CODE2">CODE2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">125</span>][<span class="number">125</span>],mat[<span class="number">125</span>][<span class="number">125</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//还是跟上面的操作一样</span></span><br><span class="line">    <span class="keyword">return</span> mat[k][m]-mat[k][j<span class="number">-1</span>]-mat[i<span class="number">-1</span>][m]+mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">            <span class="comment">//预处理出以(i,j)为右下角的矩形的面积，画画图就懂了</span></span><br><span class="line">            mat[i][j]=mat[i<span class="number">-1</span>][j]+mat[i][j<span class="number">-1</span>]-mat[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">-1e9</span>;</span><br><span class="line">    <span class="comment">//枚举左上角(i,j)，右下角(k,m)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="comment">//注意k&gt;=i,m&gt;=j</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=n;k++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> m=j;m&lt;=n;m++)&#123;</span><br><span class="line">                    ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(i,j,k,m));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CODE3">CODE3</h3><p>实际上是在枚举时优化了一下，降低时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">125</span>][<span class="number">125</span>],mat[<span class="number">125</span>][<span class="number">125</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mat[k][m]-mat[k][j<span class="number">-1</span>]-mat[i<span class="number">-1</span>][m]+mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">            mat[i][j]=mat[i<span class="number">-1</span>][j]+mat[i][j<span class="number">-1</span>]-mat[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">-1e9</span>,sum;</span><br><span class="line">    <span class="comment">//这里改成了枚举矩形的上下边i与j</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//k枚举的是第几列，从左往右扫描每一列的面积，并加到sum中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                sum+=<span class="built_in">query</span>(i,k,j,k);</span><br><span class="line">                <span class="comment">//如果sum&gt;ans，说明在以i行为上界，j行为下界的，并且右界限为k的构成的连续矩形面积（即sum）更大，更新ans</span></span><br><span class="line">                <span class="keyword">if</span>(sum&gt;ans)ans=sum;</span><br><span class="line">                <span class="comment">//如果sum&lt;0，那么只能另开一段，置sum为0</span></span><br><span class="line">                <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)sum=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以理解成是矩阵压缩，可以看看题解的第一篇，本质其实是一样的。<br><a href="https://www.luogu.com.cn/problem/solution/P1719">P1719 最大加权矩形</a></p><h1 id="语文成绩"><a href="https://www.luogu.com.cn/problem/P2367">语文成绩</a></h1><blockquote><h1 id="语文成绩-2">语文成绩</h1><h2 id="题目背景">题目背景</h2><p>语文考试结束了，成绩还是一如既往地有问题。</p><h2 id="题目描述-3">题目描述</h2><p>语文老师总是写错成绩，所以当她修改成绩的时候，总是累得不行。她总是要一遍遍地给某些同学增加分数，又要注意最低分是多少。你能帮帮她吗？</p><h2 id="输入格式-3">输入格式</h2><p>第一行有两个整数 $n$，$p$，代表学生数与增加分数的次数。</p><p>第二行有 $n$ 个数，$a_1 \sim a_n$，代表各个学生的初始成绩。</p><p>接下来 $p$ 行，每行有三个数，$x$，$y$，$z$，代表给第 $x$ 个到第 $y$ 个学生每人增加 $z$ 分。</p><h2 id="输出格式-3">输出格式</h2><p>输出仅一行，代表更改分数后，全班的最低分。</p><h2 id="样例-1-3">样例 #1</h2><h3 id="样例输入-1-3">样例输入 #1</h3><p><code>3 2 1 1 1 1 2 1 2 3 1 </code></p><h3 id="样例输出-1-3">样例输出 #1</h3><p><code>2 </code></p><h2 id="提示-3">提示</h2><p>对于 $40%$ 的数据，有 $n \le 10^3$。</p><p>对于 $60%$ 的数据，有 $n \le 10^4$。</p><p>对于 $80%$ 的数据，有 $n \le 10^5$。</p><p>对于 $100%$ 的数据，有 $n \le 5\times 10^6$，$p \le n$，学生初始成绩 $ \le 100$，$z<br>\le 100$。</p></blockquote><h2 id="思路分析-2">思路分析</h2><p>差分的板子题，但是我经常忘记怎么操作了，贴上证明。<br><img src="https://img-blog.csdnimg.cn/direct/7348fc92b069475784845bf92f234e14.png#pic_center" alt="在这里插入图片描述"><br>这里贴的是<a href="https://www.luogu.com.cn/blog/156353/solution-p2367">GoldenFishX大佬的博客</a>，可以看看（大佬如果觉得侵权，联系我删除即可qwq）。</p><h2 id="AC代码-3">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ll p, n, a[<span class="number">5000500</span>], d[<span class="number">5000500</span>];</span><br><span class="line">ll x, y, z, ans=<span class="number">9999999999</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="comment">//求出差分数组</span></span><br><span class="line">d[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="comment">//上面讲得很清楚了</span></span><br><span class="line">d[x] += z;</span><br><span class="line">d[y + <span class="number">1</span>] -= z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="comment">//差分的性质：a[i]=d[i]+d[i-1]+d[i-2]+······+d[1]</span></span><br><span class="line">a[i] = a[i - <span class="number">1</span>] + d[i];</span><br><span class="line">ans = <span class="built_in">min</span>(ans, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="地毯"><a href="https://www.luogu.com.cn/problem/P3397">地毯</a></h1><h2 id="题目描述-4">题目描述</h2><p>在 $n\times n$ 的格子上有 $m$ 个地毯。</p><p>给出这些地毯的信息，问每个点被多少个地毯覆盖。</p><h2 id="输入格式-4">输入格式</h2><p>第一行，两个正整数 $n,m$。意义如题所述。</p><p>接下来 $m$ 行，每行两个坐标 $(x_1,y_1)$ 和 $(x_2,y_2)$，代表一块地毯，左上角是 $(x_1,y_1)$，右下角是 $(x_2,y_2)$。</p><h2 id="输出格式-4">输出格式</h2><p>输出 $n$ 行，每行 $n$ 个正整数。</p><p>第 $i$ 行第 $j$ 列的正整数表示 $(i,j)$ 这个格子被多少个地毯覆盖。</p><h2 id="样例-1-4">样例 #1</h2><h3 id="样例输入-1-4">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 2 3 3</span><br><span class="line">3 3 5 5</span><br><span class="line">1 2 1 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1 1 1 0</span><br><span class="line">0 1 1 0 0</span><br><span class="line">0 1 2 1 1</span><br><span class="line">0 0 1 1 1</span><br><span class="line">0 0 1 1 1</span><br></pre></td></tr></table></figure><h2 id="提示-4">提示</h2><h3 id="样例解释">样例解释</h3><p>覆盖第一个地毯后：</p><table><thead><tr><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th></tr></thead><tbody><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr></tbody></table><p>覆盖第一、二个地毯后：</p><table><thead><tr><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th><th style="text-align:center">$0$</th></tr></thead><tbody><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$2$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr></tbody></table><p>覆盖所有地毯后：</p><table><thead><tr><th style="text-align:center">$0$</th><th style="text-align:center">$1$</th><th style="text-align:center">$1$</th><th style="text-align:center">$1$</th><th style="text-align:center">$0$</th></tr></thead><tbody><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$2$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr><tr><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$1$</td></tr></tbody></table><hr><h3 id="数据范围">数据范围</h3><p>对于 $20%$ 的数据，有 $n\le 50$，$m\le 100$。</p><p>对于 $100%$ 的数据，有 $n,m\le 1000$。</p><h2 id="思路分析-3">思路分析</h2><p>这题其实可以暴力模拟水过去，但实际上正解是二维差分。（补学一下qwq）。<br>设数组$a$的差分数组为$b$，则：<br>$$b[[i][j]=a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]$$.<br>（偷懒了，直接贴书上的内容qwq）</p><blockquote><p><img src="https://img-blog.csdnimg.cn/direct/268ddecc2f5c4e04bcbd0ab4d710df40.png#pic_center" alt="在这里插入图片描述"></p></blockquote><p>可以看到(a)，(b)图中，右下角的矩形中的各点都+1了，可以试着结合一维差分的证明理解一下wsm。©，(d)图其实就是相同的操作罢了。</p><h2 id="AC代码-4">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> mat[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">        <span class="comment">//上面提到的操作</span></span><br><span class="line">        mat[x1][y1]++;</span><br><span class="line">        mat[x2+<span class="number">1</span>][y1]--;</span><br><span class="line">        mat[x1][y2+<span class="number">1</span>]--;</span><br><span class="line">        mat[x2+<span class="number">1</span>][y2+<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="comment">//求前缀和，处理出每个点的值</span></span><br><span class="line">            mat[i][j]+=mat[i<span class="number">-1</span>][j]+mat[i][j<span class="number">-1</span>]-mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            cout&lt;&lt;mat[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="火烧赤壁"><a href="https://www.luogu.com.cn/problem/P1496">火烧赤壁</a></h1><h2 id="题目背景-2">题目背景</h2><p>曹操平定北方以后，公元 208 年，率领大军南下，进攻刘表。他的人马还没有到荆州，刘表已经病死。他的儿子刘琮听到曹军声势浩大，吓破了胆，先派人求降了。</p><p>孙权任命周瑜为都督，拨给他三万水军，叫他同刘备协力抵抗曹操。</p><p>隆冬的十一月，天气突然回暖，刮起了东南风。</p><p>没想到东吴船队离开北岸大约二里距离，前面十条大船突然同时起火。火借风势，风助火威。十条火船，好比十条火龙一样，闯进曹军水寨。那里的船舰，都挤在一起，又躲不开，很快地都烧起来。一眨眼工夫，已经烧成一片火海。</p><p>曹操气急败坏的把你找来，要你钻入火海把连环线上着火的船只的长度统计出来！</p><h2 id="题目描述-5">题目描述</h2><p>给定每个起火部分的起点和终点，请你求出燃烧位置的长度之和。</p><h2 id="输入格式-5">输入格式</h2><p>第一行一个整数，表示起火的信息条数 $n$。<br>接下来 $n$ 行，每行两个整数 $a, b$，表示一个着火位置的起点和终点（<strong>注意：左闭右开</strong>）。</p><h2 id="输出格式-5">输出格式</h2><p>输出一行一个整数表示答案。</p><h2 id="样例-1-5">样例 #1</h2><h3 id="样例输入-1-5">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">-1 1</span><br><span class="line">5 11</span><br><span class="line">2 9</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-5">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="提示-5">提示</h2><h3 id="数据规模与约定">数据规模与约定</h3><p>对于全部的测试点，保证 $1 \leq n \leq 2 \times 10^4$，$-2^{31} \leq a \leq  b \lt 2^{31}$，且答案小于 $2^{31}$。</p><h2 id="思路分析-4">思路分析</h2><p>实际上这是一道离散化的题目，但是我当初做的时候还不会离散化qwq，看了题解区大佬的绝妙思路：<br><a href="https://wxwoo.blog.luogu.org/solution-p1496">大佬的题解</a><br><img src="https://img-blog.csdnimg.cn/direct/dbcb14ba5ade43389d9fc5e8b3e94590.png#pic_center" alt="在这里插入图片描述"><br>可以发现，覆盖的范围是一样的，那么我们可以这样操作：<br>1、将起点和终点排个序。<br>2、将他们按照从小到大的顺序一一匹配，计算长度。<br>3、如果有重复的覆盖范围，减去即可。（也就是当前的终点坐标比下一个的起点坐标大时）</p><h2 id="AC代码-5">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll a[<span class="number">20200</span>], b[<span class="number">20200</span>], l;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"><span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">l += b[i] - a[i];</span><br><span class="line"><span class="comment">//注意i&lt;n,因为a[n]，b[n]是最后的起点和终点</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">l -= b[i] - a[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; l;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="领地选择"><a href="https://www.luogu.com.cn/problem/P2004">领地选择</a></h1><h2 id="题目描述-6">题目描述</h2><p>作为在虚拟世界里统帅千军万马的领袖，小 Z 认为天时、地利、人和三者是缺一不可的，所以，谨慎地选择首都的位置对于小 Z 来说是非常重要的。</p><p>首都被认为是一个占地 $C\times C$ 的正方形。小 Z 希望你寻找到一个合适的位置，使得首都所占领的位置的土地价值和最高。</p><h2 id="输入格式-6">输入格式</h2><p>第一行三个整数 $N,M,C$，表示地图的宽和长以及首都的边长。</p><p>接下来 $N$ 行每行 $M$ 个整数，表示了地图上每个地块的价值。价值可能为负数。</p><h2 id="输出格式-6">输出格式</h2><p>一行两个整数 $X,Y$，表示首都左上角的坐标。</p><h2 id="样例-1-6">样例 #1</h2><h3 id="样例输入-1-6">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 4 2</span><br><span class="line">1 2 3 1</span><br><span class="line">-1 9 0 2</span><br><span class="line">2 0 1 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-6">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><h2 id="提示-6">提示</h2><p>对于 $60%$ 的数据，$N,M\le 50$。</p><p>对于 $90%$ 的数据，$N,M\le 300$。</p><p>对于 $100%$ 的数据，$1\le N,M\le 10^3$，$1\le C\le \min(N,M)$。</p><h2 id="思路分析-5">思路分析</h2><p>二维前缀和的练习题，不解释了qwq。</p><h2 id="AC代码-6">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ll n, m, c;</span><br><span class="line">ll map[<span class="number">1010</span>][<span class="number">1010</span>], sum[<span class="number">1010</span>][<span class="number">1010</span>], maxn = <span class="number">-999999999</span>, nx,ny;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">cin &gt;&gt; map[i][j];</span><br><span class="line"><span class="comment">//求前缀和</span></span><br><span class="line">sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = c; j &lt;= m; j++) &#123;</span><br><span class="line">    <span class="comment">//枚举以(i,j)为右下角、边长为c的正方形的面积，注意更新坐标</span></span><br><span class="line"><span class="keyword">if</span> (sum[i][j] - sum[i - c][j] - sum[i][j - c] + sum[i - c][j - c] &gt; maxn) &#123;</span><br><span class="line">maxn = sum[i][j] - sum[i - c][j] - sum[i][j - c] + sum[i - c][j - c];</span><br><span class="line">nx = i - c + <span class="number">1</span>;</span><br><span class="line">ny = j - c + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; nx &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ny;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聪明的质检员"><a href="https://www.luogu.com.cn/problem/P1314">聪明的质检员</a></h1><blockquote><h2 id="题目描述-7">题目描述</h2><p><code>小T</code> 是一名质量监督员，最近负责检验一批矿产的质量。这批矿产共有 $n$ 个矿石，从 $1$ 到 $n$<br>逐一编号，每个矿石都有自己的重量 $w_i$ 以及价值 $v_i$ 。检验矿产的流程是：</p><ol><li>给定$ m$ 个区间 $[l_i,r_i]$；</li><li>选出一个参数 $W$；</li><li>对于一个区间 $[l_i,r_i]$，计算矿石在这个区间上的检验值 $y_i$：</li></ol><p>$$y_i=\sum\limits_{j=l_i}^{r_i}[w_j \ge W] \times<br>\sum\limits_{j=l_i}^{r_i}[w_j \ge W]v_j$$</p><p>其中 $j$ 为矿石编号。</p><p>这批矿产的检验结果 $y$ 为各个区间的检验值之和。即：$\sum\limits_{i=1}^m y_i$</p><p>若这批矿产的检验结果与所给标准值 $s$ 相差太多，就需要再去检验另一批矿产。<code>小T</code> 不想费时间去检验另一批矿产，所以他想通过调整参数<br>$W$ 的值，让检验结果尽可能的靠近标准值 $s$，即使得 $|s-y|$ 最小。请你帮忙求出这个最小值。</p><h2 id="输入格式-7">输入格式</h2><p>第一行包含三个整数 $n,m,s$，分别表示矿石的个数、区间的个数和标准值。</p><p>接下来的 $n$ 行，每行两个整数，中间用空格隔开，第 $i+1$ 行表示 $i$ 号矿石的重量 $w_i$ 和价值 $v_i$。</p><p>接下来的 $m$ 行，表示区间，每行两个整数，中间用空格隔开，第 $i+n+1$ 行表示区间 $[l_i,r_i]$ 的两个端点 $l_i$<br>和 $r_i$。注意：不同区间可能重合或相互重叠。</p><h2 id="输出格式-7">输出格式</h2><p>一个整数，表示所求的最小值。</p><h2 id="样例-1-7">样例 #1</h2><h3 id="样例输入-1-7">样例输入 #1</h3><p><code>5 3 15  1 5  2 5  3 5  4 5  5 5  1 5  2 4  3 3 </code></p><h3 id="样例输出-1-7">样例输出 #1</h3><p><code>10 </code></p><h2 id="提示-7">提示</h2><p>【输入输出样例说明】</p><p>当 $W$ 选 $4$ 的时候，三个区间上检验值分别为 $20,5 ,0$ ，这批矿产的检验结果为 $25$，此时与标准值 $S$<br>相差最小为 $10$。</p><p>【数据范围】</p><p>对于 $10%$ 的数据，有 $1 ≤n ,m≤10$；</p><p>对于 $30%$的数据，有 $1 ≤n ,m≤500$ ；</p><p>对于 $50%$ 的数据，有 $1 ≤n ,m≤5,000$；   对于 $70%$ 的数据，有 $1 ≤n ,m≤10,000$ ；</p><p>对于 $100%$ 的数据，有 $1 ≤n ,m≤200,000$，$0 &lt; w_i,v_i≤10^6$，$0 &lt;<br>s≤10^{12}$，$1 ≤l_i ≤r_i ≤n$</p></blockquote><h2 id="思路分析-6">思路分析</h2><p>直接暴力枚举求出这个点肯定不行，并且看到题目要求最小值，所以可以猜测：使用二分。<br>二分的是$W$的值，$check(mid)$的判断条件是$s-\sum\limits_{i=1}^m y_i$是否大于0，由此缩减二分的范围，分析一下单调性：当$W$减少时，$\sum\limits_{i=1}^m y_i$增大，反之，则变小，并且当$W$足够小时，$\sum\limits_{i=1}^m y_i$会大于$s$,符合单调性，可以使用二分。具体看看注释。<br>还需要先预处理出前缀和：包括个数和总价值，否则会TLE。</p><h2 id="AC代码-7">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> v[MAXN],w[MAXN],l[MAXN],r[MAXN],cnt_num[MAXN],cnt_val[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    ll sum,ans,s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    ans=s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//w是矿石的重量，v是矿石的价值</span></span><br><span class="line">        cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="comment">//输入的是查询的区间</span></span><br><span class="line">        cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(cnt_num,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt_num));</span><br><span class="line">        <span class="built_in">memset</span>(cnt_val,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt_val));</span><br><span class="line">        <span class="comment">//利用前缀和，预处理出合格品的个数和总价值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i]&gt;=mid)&#123;</span><br><span class="line">                cnt_num[i]=cnt_num[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                cnt_val[i]=cnt_val[i<span class="number">-1</span>]+v[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cnt_num[i]=cnt_num[i<span class="number">-1</span>];</span><br><span class="line">                cnt_val[i]=cnt_val[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计一下检测结果，也就是查询的各个区间总价值之和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            sum+=(cnt_val[r[i]]-cnt_val[l[i]<span class="number">-1</span>])*(cnt_num[r[i]]-cnt_num[l[i]<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意更新答案，得到的是最小值，注意ans初始化为无穷大</span></span><br><span class="line">        ans=<span class="built_in">min</span>(ans,<span class="built_in">abs</span>(sum-s));</span><br><span class="line">        <span class="comment">//说明这个解合法，将右端点确定下来</span></span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=s)right=mid;</span><br><span class="line">        <span class="comment">//否则，将左端点确定下来</span></span><br><span class="line">        <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="程序自动分析"><a href="https://www.luogu.com.cn/problem/P1955">程序自动分析</a></h1><blockquote><h1 id="NOI2015-程序自动分析">[NOI2015] 程序自动分析</h1><h2 id="题目描述-8">题目描述</h2><p>在实现程序自动分析的过程中，常常需要判定一些约束条件是否能被同时满足。</p><p>考虑一个约束满足问题的简化版本：假设 $x_1,x_2,x_3,\cdots$ 代表程序中出现的变量，给定 $n$ 个形如<br>$x_i=x_j$ 或 $x_i\neq x_j$<br>的变量相等/不等的约束条件，请判定是否可以分别为每一个变量赋予恰当的值，使得上述所有约束条件同时被满足。例如，一个问题中的约束条件为：$x_1=x_2,x_2=x_3,x_3=x_4,x_4\neq<br>x_1$，这些约束条件显然是不可能同时被满足的，因此这个问题应判定为不可被满足。</p><p>现在给出一些约束满足问题，请分别对它们进行判定。</p><h2 id="输入格式-8">输入格式</h2><p>输入的第一行包含一个正整数 $t$，表示需要判定的问题个数。注意这些问题之间是相互独立的。</p><p>对于每个问题，包含若干行：</p><p>第一行包含一个正整数 $n$，表示该问题中需要被满足的约束条件个数。接下来 $n$ 行，每行包括三个整数<br>$i,j,e$，描述一个相等/不等的约束条件，相邻整数之间用单个空格隔开。若 $e=1$，则该约束条件为<br>$x_i=x_j$。若$e=0$，则该约束条件为 $x_i\neq x_j$。</p><h2 id="输出格式-8">输出格式</h2><p>输出包括 $t$ 行。</p><p>输出文件的第 $k$ 行输出一个字符串 <code>YES</code> 或者 <code>NO</code>（字母全部大写），<code>YES</code> 表示输入中的第 $k$<br>个问题判定为可以被满足，<code>NO</code> 表示不可被满足。</p><h2 id="样例-1-8">样例 #1</h2><h3 id="样例输入-1-8">样例输入 #1</h3><p><code>2 2 1 2 1 1 2 0 2 1 2 1 2 1 1 </code></p><h3 id="样例输出-1-8">样例输出 #1</h3><p><code>NO YES </code></p><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><p><code>2 3 1 2 1 2 3 1 3 1 1 4 1 2 1 2 3 1 3 4 1 1 4 0 </code></p><h3 id="样例输出-2">样例输出 #2</h3><p><code>YES NO </code></p><h2 id="提示-8">提示</h2><p>【样例解释1】</p><p>在第一个问题中，约束条件为：$x_1=x_2,x_1\neq x_2$。这两个约束条件互相矛盾，因此不可被同时满足。</p><p>在第二个问题中，约束条件为：$x_1=x_2,x_1 = x_2$。这两个约束条件是等价的，可以被同时满足。</p><p>【样例说明2】</p><p>在第一个问题中，约束条件有三个：$x_1=x_2,x_2= x_3,x_3=x_1$。只需赋值使得<br>$x_1=x_2=x_3$，即可同时满足所有的约束条件。</p><p>在第二个问题中，约束条件有四个：$x_1=x_2,x_2= x_3,x_3=x_4,x_4\neq x_1$。由前三个约束条件可以推出<br>$x_1=x_2=x_3=x_4$，然而最后一个约束条件却要求 $x_1\neq x_4$，因此不可被满足。</p><p>【数据范围】</p><p>所有测试数据的范围和特点如下表所示：</p><h3 id="勘误：测试点-8-sim-10-的-i-j-约束为-1-leq-i-j-leq-10-9-，而不是下图中的-10-10-。">勘误：测试点 $8 \sim 10$ 的 $i, j$ 约束为 $1 \leq i, j \leq 10^9$，而不是下图中的 $10^{10}$。</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/4a99dde45fc5970ecba60d38c39a3bc2.png" alt=""></p></blockquote><h2 id="思路分析-7">思路分析</h2><p>这个其实是并查集+离散化，但是离散化我还不太熟，暂时没写。当初用了$unordered-map$混过去了qwq。<br>说正题，这道题有两个特征，查询和赋值，我们分析一下，这其实跟并查集的功能很相似，并查集维护的是一些元素的分组，用的是查询和合并两个操作。这里的赋值，我们其实可以用合并来实现：<br>1、如果是赋值，合并为一组。<br>2、如果是查询，那么我们只要看两者是否在同一组内即可。<br>这里并查集写的是按秩合并，不会的可以用普通的并查集代替。</p><h2 id="AC代码-8">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pre;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;Rank;</span><br><span class="line"><span class="type">int</span> x[MAXN],y[MAXN],e[MAXN];</span><br><span class="line"><span class="comment">//并查集的查询功能</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==pre[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> pre[x]=<span class="built_in">find</span>(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并查集的合并功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx=<span class="built_in">find</span>(x),fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(Rank[fx]&gt;=Rank[fy])pre[fy]=fx;</span><br><span class="line">    <span class="keyword">else</span> pre[fx]=fy;</span><br><span class="line">    <span class="keyword">if</span>(Rank[fx]==Rank[fy]&amp;&amp;fx!=fy)Rank[fx]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意清空数组，因为有多组数据输入，不然喜迎WA qwq</span></span><br><span class="line">    pre.<span class="built_in">clear</span>();</span><br><span class="line">    Rank.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="built_in">sizeof</span>(x));</span><br><span class="line">    <span class="built_in">memset</span>(y,<span class="number">0</span>,<span class="built_in">sizeof</span>(y));</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="built_in">sizeof</span>(e));</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//输入元素，以及对应的操作，注意在原题中指的是下标x，y</span></span><br><span class="line">        cin&gt;&gt;x[i]&gt;&gt;y[i]&gt;&gt;e[i];</span><br><span class="line">        <span class="comment">//将并查集初始化</span></span><br><span class="line">        pre[x[i]]=x[i];</span><br><span class="line">        pre[y[i]]=y[i];</span><br><span class="line">        <span class="comment">//按秩合并才需要的初始化，其实这一行也可以不用写@~@</span></span><br><span class="line">        Rank[x[i]]=<span class="number">1</span>,Rank[y[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果是1，合并两个元素</span></span><br><span class="line">        <span class="keyword">if</span>(e[i])<span class="built_in">join</span>(x[i],y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果不是1，查看两者的祖先是否一样</span></span><br><span class="line">        <span class="keyword">if</span>(!e[i])&#123;</span><br><span class="line">            <span class="comment">//不一样的话，直接输出NO，return 0</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x[i])==<span class="built_in">find</span>(y[i]))&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//经历重重困难，终于是YES了！！！</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="USACO11MAR-Brownie-Slicing-G"><a href="https://www.luogu.com.cn/problem/P3017">[USACO11MAR] Brownie Slicing G</a></h1><h2 id="题面翻译">题面翻译</h2><p>Bessie烘焙了一块巧克力蛋糕。这块蛋糕是由 $R\times C(1\leq R,C\leq 500)$ 个小的巧克力蛋糕组成的。第 $i$ 行，第 $j$ 列的蛋糕有 $N_{i,j}(N_{i,j}\leq 4000)$ 块巧克力碎屑。</p><p>Bessie想把蛋糕分成 $A\times B(1\leq A\leq R,1\leq B\leq C)$ 块，:给 $A\times B$ 只奶牛。蛋糕先水平地切 $A-1$ 刀（只能切沿整数坐标切）来把蛋糕划分成 $A$ 块。然后再把剩下来的每一块独立地切 $B-1$ 刀，也只能切沿整数坐标切。其他 $A\times B-1$ 只奶牛就每人选一块，留下一块给Bessie。由于贪心，他们只会留给Bessie巧克力碎屑最少的那块。求出Bessie最优情况下会获得多少巧克力碎屑。</p><p>例如，考虑一个$5\times4$的蛋糕，上面的碎屑分布如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 1</span><br><span class="line">3 1 1 1</span><br><span class="line">2 0 1 3</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><p>Bessie必须把蛋糕切成4条，每条分成2块。Bessie能像这样切蛋糕:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 | 2 1</span><br><span class="line">---------</span><br><span class="line">3 | 1 1 1</span><br><span class="line">---------</span><br><span class="line">2 0 1 | 3</span><br><span class="line">---------</span><br><span class="line">1 1 | 1 1</span><br><span class="line">1 1 | 1 1</span><br></pre></td></tr></table></figure><p>这样，Bessie至少能获得 $3$ 块巧克力碎屑</p><h2 id="题目描述-9">题目描述</h2><p>Bessie has baked a rectangular brownie that can be thought of as an RxC grid (1 &lt;= R &lt;= 500; 1 &lt;= C &lt;= 500) of little brownie squares. The square at row i, column j contains N_ij (0 &lt;= N_ij &lt;= 4,000) chocolate chips.</p><p>Bessie wants to partition the brownie up into A*B chunks (1 &lt;= A &lt;= R; 1 &lt;= B &lt;= C): one for each of the A*B cows. The brownie is cut by first making A-1 horizontal cuts (always along integer</p><p>coordinates) to divide the brownie into A strips.  Then cut each strip *independently* with B-1 vertical cuts, also on integer</p><p>boundaries. The other A*B-1 cows then each choose a brownie piece, leaving the last chunk for Bessie. Being greedy, they leave Bessie the brownie that has the least number of chocolate chips on it.</p><p>Determine the maximum number of chocolate chips Bessie can receive, assuming she cuts the brownies optimally.</p><p>As an example, consider a 5 row x 4 column brownie with chips</p><p>distributed like this:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 1</span><br><span class="line">3 1 1 1</span><br><span class="line">2 0 1 3</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><p>Bessie must partition the brownie into 4 horizontal strips, each with two pieces. Bessie can cut the brownie like this:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 | 2 1</span><br><span class="line">---------</span><br><span class="line">3 | 1 1 1</span><br><span class="line">---------</span><br><span class="line">2 0 1 | 3</span><br><span class="line">---------</span><br><span class="line">1 1 | 1 1</span><br><span class="line">1 1 | 1 1</span><br></pre></td></tr></table></figure><p>Thus, when the other greedy cows take their brownie piece, Bessie still gets 3 chocolate chips.</p><p>Bessie烘焙了一块巧克力蛋糕。这块蛋糕是由R*C(1 &lt;= R,C &lt;= 500)个小的巧克力蛋糕组成的。第i行，第j列的蛋糕有N_ij(1&lt;= N_ij &lt;= 4,000)块巧克力碎屑。</p><p>Bessie想把蛋糕分成A*B块，(1 &lt;= A&lt;= R,1 &lt;= B &lt;= C): 给A*B只奶牛。蛋糕先水平地切A-1刀（只能切沿整数坐标切）来把蛋糕划分成A块。然后再把剩下来的每一块独立地切B-1刀，也只能切沿整数坐标切。其他A*B-1只奶牛就每人选一块，留下一块给Bessie。由于贪心，他们只会留给Bessie巧克力碎屑最少的那块。求出Bessie最优情况下会获得多少巧克力碎屑。</p><p>例如，考虑一个5*4的蛋糕，上面的碎屑分布如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 1</span><br><span class="line">3 1 1 1</span><br><span class="line">2 0 1 3</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><p>Bessie必须把蛋糕切成4条，每条分成2块。Bessie能像这样切蛋糕:</p><h2 id="输入格式-9">输入格式</h2><p>* Line 1: Four space-separated integers: R, C, A, and B</p><p>* Lines 2…R+1: Line i+1 contains C space-separated integers: N_i1, …, N_iC</p><h2 id="输出格式-9">输出格式</h2><p>* Line 1: A single integer: the maximum number of chocolate chips that Bessie guarantee on her brownie</p><h2 id="样例-1-9">样例 #1</h2><h3 id="样例输入-1-9">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 4 4 2 </span><br><span class="line">1 2 2 1 </span><br><span class="line">3 1 1 1 </span><br><span class="line">2 0 1 3 </span><br><span class="line">1 1 1 1 </span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-9">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="思路分析-8">思路分析</h2><p>当初也没想出来怎么二分，看了题解区大佬的题解恍然大悟。<br>蛋糕要分成$A * B$块，注意可以先分成$A$横块，每一块再分成$B$条，也就是切条时可以不用一刀切！！！<br>那么要统计一块蛋糕的巧克力屑，肯定就是使用前缀和了。我们也可以先预处理出前缀和，再进行二分。<br>二分的是巧克力屑的数量，$check(mid)$的是能否切出$A*B$块蛋糕，具体$check(mid)$怎么写可以看看代码+注释。</p><h2 id="AC代码-9">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> cake[<span class="number">510</span>][<span class="number">510</span>],line[<span class="number">510</span>][<span class="number">510</span>],pre[<span class="number">510</span>][<span class="number">510</span>],r,c,a,b,ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>,last=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//我们先切一行，再将这一行切成B列，看看最终能否满足A*B块蛋糕</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>,sum_cake=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//i枚举的是当前行，j枚举的是当前列，last记录的是上一块（行）蛋糕的最底行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            <span class="comment">//判断当前切的蛋糕的巧克力屑的数量是否大于x，也就是二分的值</span></span><br><span class="line">            <span class="comment">//我们一列一列的补充蛋糕，判断补充后，其巧克力屑数目是否大于x，不满足，则补充。</span></span><br><span class="line">            <span class="keyword">if</span>(sum_cake+(pre[i][j]-pre[i][j<span class="number">-1</span>])-(pre[last][j]-pre[last][j<span class="number">-1</span>])&lt;x)&#123;</span><br><span class="line">                sum_cake+=(pre[i][j]-pre[i][j<span class="number">-1</span>])-(pre[last][j]-pre[last][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//满足，另开一列，注意统计的蛋糕数目+1，蛋糕上的巧克力屑数目重置为0</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sum_cake=<span class="number">0</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断这一行蛋糕，切出来是否有B块</span></span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=b)&#123;</span><br><span class="line">        <span class="comment">//如果有B块，我们则记录这块蛋糕的最后一行，并且记录 行的蛋糕数量++，没有只能再加上一行继续切了，直到满足为止。</span></span><br><span class="line">            last=i;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看看是否能不能切除A行蛋糕，满足return true，否则，返回false</span></span><br><span class="line">    <span class="keyword">if</span>(num&lt;a)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//输入R、C、A、B</span></span><br><span class="line">    cin&gt;&gt;r&gt;&gt;c&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="comment">//输入蛋糕的巧克力屑</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            cin&gt;&gt;cake[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//预处理出前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            pre[i][j]=pre[i<span class="number">-1</span>][j]+pre[i][j<span class="number">-1</span>]-pre[i<span class="number">-1</span>][j<span class="number">-1</span>]+cake[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=MAXN;</span><br><span class="line">    <span class="comment">//二分，不多说了，重点在check(x)</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="海底高铁"><a href="https://www.luogu.com.cn/problem/P3406">海底高铁</a></h1><h2 id="思路分析-9">思路分析</h2><p>先想想暴力怎么办？我们可以先统计每段铁路要经过几次，再贪心，看看是办卡优惠还是买票优惠。<br>但是这样肯定会TLE，想想怎么改——————前缀和吗？不对，前缀和求的是多个元素之间的关系。<br>差分吗？差分维护的是多个元素之间的逻辑关系，最终得到的是单个元素。<br>那就是差分了！我们可以利用它来得出每段铁路经过的次数，想想差分的作用，O(1)修改区间的值，O(n)查询单个元素的值。基于此，我们可以先O(1)预处理区间总共要修改的值，再O(n)得到每段铁路经过的次数，最后贪心得出最小花费。具体可以看看注释。<br>可以看看这篇<a href="https://www.luogu.com.cn/article/srpjwp5w">搞笑的故事</a>，相信会有所收获。</p><h2 id="AC代码-10">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll p[MAXN],a[MAXN],b[MAXN],c[MAXN],ans[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用差分，统计修改次数，注意相邻元素不一定是从小到大，所以可能得交换顺序</span></span><br><span class="line">    <span class="comment">//一般来说，是d[l]++,d[r+1]--。l指的是左端点，r指的是右端点，但是我们这里d[l]++,d[r]--即可，因为其实从r城市出发的铁路我们根本不需要经过。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        ans[<span class="built_in">min</span>(p[i],p[i+<span class="number">1</span>])]++;</span><br><span class="line">        ans[<span class="built_in">max</span>(p[i],p[i+<span class="number">1</span>])]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用差分得出每段铁路需要经过的次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans[i]+=ans[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//贪心，看看每一段铁路是买票优惠还是买卡优惠</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum+=<span class="built_in">min</span>(ans[i]*a[i],ans[i]*b[i]+c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Poetize6-IncDec-Sequence"><a href="https://www.luogu.com.cn/problem/P4552">[Poetize6] IncDec Sequence</a></h1><blockquote><h1 id="Poetize6-IncDec-Sequence-2">[Poetize6] IncDec Sequence</h1><h2 id="题目描述-10">题目描述</h2><p>给定一个长度为 $n$ 的数列 ${a_1,a_2,\cdots,a_n}$，每次可以选择一个区间$[l,r]$，使这个区间内的数都加<br>$1$ 或者都减 $1$。     请问至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列有多少种。</p><h2 id="输入格式-10">输入格式</h2><p>第一行一个正整数 $n$    接下来 $n$ 行,每行一个整数,第 $i+1 $行的整数表示 $a_i$。</p><h2 id="输出格式-10">输出格式</h2><p>第一行输出最少操作次数    第二行输出最终能得到多少种结果</p><h2 id="样例-1-10">样例 #1</h2><h3 id="样例输入-1-10">样例输入 #1</h3><p><code>4 1 1 2 2 </code></p><h3 id="样例输出-1-10">样例输出 #1</h3><p><code>1 2 </code></p><h2 id="提示-9">提示</h2><p>对于 $100%$ 的数据，$n\le 100000, 0 \le a_i \le 2^{31}$。</p></blockquote><h2 id="思路分析-10">思路分析</h2><p>先想想元素相同？其实就是他们的差都是0，我们关注的是单个元素，并且是各元素之间的逻辑关系问题，所以我们使用差分来求解。<br>那么问题就变成了怎么让差分数组全为0（除了$diff[1]$不为0，因为$a[0]$为0），对一个区间$[l,r]$进行修改，其实就是$diff[l]++$、$dff[r+1]–$。而一个差分数组里元素肯定有正有负，最好的情况是，一次修改，可以让一个负数加1，一个正数减1，这样操作步骤就是最少的。<br>但是如果只剩下正数或者负数，就只能一次一次进行了。<br>至于有多少可能结果，其实就是最后只剩正数或者负数时，一步步修改的操作次数了。为什么？<br>前面修改的时候，我们修改的是$[l,r]$，对$diff[1]$无影响，而只剩正数或者负数时，我们可以$diff[1]++$$diff[x]–$了，也可以$diff[1]–$$diff[x]++$，也可以不动，所以可能的结果就是：剩余的正数/负数+1，因为本身不修改，也要加上。</p><h2 id="AC代码-11">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,x=<span class="number">0</span>,y=<span class="number">0</span>,d;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//求差分数组：x统计正数，y统计负数</span></span><br><span class="line">        d=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(d&gt;<span class="number">0</span>)x+=d;</span><br><span class="line">        <span class="keyword">else</span> y-=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//严格的证明是:ans1=min(x,y)+abs(x-y),所以ans1=max(x,y)。</span></span><br><span class="line">    ll ans1=<span class="built_in">max</span>(x,y);</span><br><span class="line">    <span class="comment">//不解释了，看看上面</span></span><br><span class="line">    ll ans2=<span class="built_in">abs</span>(x-y)+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;ans1&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;ans2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NOIP2012-提高组-借教室"><a href="https://www.luogu.com.cn/problem/P1083">[NOIP2012 提高组] 借教室</a></h1><h2 id="题目描述-11">题目描述</h2><p>在大学期间，经常需要租借教室。大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。教室的大小功能不同，借教室人的身份不同，借教室的手续也不一样。</p><p>面对海量租借教室的信息，我们自然希望编程解决这个问题。</p><p>我们需要处理接下来 $n$ 天的借教室信息，其中第 $i$ 天学校有 $r_i$ 个教室可供租借。共有 $m$ 份订单，每份订单用三个正整数描述，分别为 $d_j,s_j,t_j$，表示某租借者需要从第 $s_j$ 天到第 $t_j$ 天租借教室（包括第 $s_j$ 天和第 $t_j$ 天），每天需要租借 $d_j$ 个教室。</p><p>我们假定，租借者对教室的大小、地点没有要求。即对于每份订单，我们只需要每天提供 $d_j$ 个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。</p><p>借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。如果在分配的过程中遇到一份订单无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。这里的无法满足指从第 $s_j$ 天到第 $t_j$ 天中有至少一天剩余的教室数量不足 $d_j$ 个。</p><p>现在我们需要知道，是否会有订单无法完全满足。如果有，需要通知哪一个申请人修改订单。</p><h2 id="输入格式-11">输入格式</h2><p>第一行包含两个正整数 $n,m$，表示天数和订单的数量。</p><p>第二行包含 $n$ 个正整数，其中第 $i$ 个数为 $r_i$，表示第 $i$ 天可用于租借的教室数量。</p><p>接下来有 $m$ 行，每行包含三个正整数 $d_j,s_j,t_j$，表示租借的数量，租借开始、结束分别在第几天。</p><p>每行相邻的两个数之间均用一个空格隔开。天数与订单均用从 $1$ 开始的整数编号。</p><h2 id="输出格式-11">输出格式</h2><p>如果所有订单均可满足，则输出只有一行，包含一个整数 $0$。否则（订单无法完全满足）</p><p>输出两行，第一行输出一个负整数 $-1$，第二行输出需要修改订单的申请人编号。</p><h2 id="样例-1-11">样例 #1</h2><h3 id="样例输入-1-11">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3 </span><br><span class="line">2 5 4 3 </span><br><span class="line">2 1 3 </span><br><span class="line">3 2 4 </span><br><span class="line">4 2 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-11">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="提示-10">提示</h2><p>【输入输出样例说明】</p><p>第 $1$份订单满足后，$4$天剩余的教室数分别为 $0,3,2,3$。第 $2$ 份订单要求第 $2$天到第 $4$ 天每天提供$3$个教室，而第 $3$ 天剩余的教室数为$2$，因此无法满足。分配停止，通知第$2$ 个申请人修改订单。</p><p>【数据范围】</p><p>对于10%的数据，有$1≤ n,m≤ 10$；</p><p>对于30%的数据，有$1≤ n,m≤1000$；</p><p>对于 70%的数据，有$1 ≤ n,m ≤ 10^5$；</p><p>对于 100%的数据，有$1 ≤ n,m ≤ 10^6,0 ≤ r_i,d_j≤ 10^9,1 ≤ s_j≤ t_j≤ n$。</p><p>NOIP 2012 提高组 第二天 第二题</p><p>2022.2.20 新增一组 hack 数据</p><h2 id="思路分析-11">思路分析</h2><p>（这道当初也不会qwq，看了题解<a href="https://www.luogu.com.cn/article/sncheqxz">大佬——皎月半洒花</a>的博客）还是想想暴力，可以暴力先枚举订单数量，然后减少可以使用的教室数目，直到超过上限为止，但是这肯定会TLE。<br>想想怎么办？我们修改的是教室的数目，并且是一个区间，所以想到的是差分。<br>因为需要找到哪一个不满足，所以加上二分进行查询即可。<br>引用大佬的话：</p><blockquote><p>一般来说，二分是个很有用的优化途径，因为这样会直接导致减半运算，而对于能否二分，有一个界定标准：状态的决策过程或者序列<strong>是否满足单调性或者可以局部舍弃性</strong>。 而在这个题里，因为如果前一份订单都不满足，那么之后的所有订单都不用继续考虑；而如果后一份订单都满足，那么之前的所有订单一定都可以满足，符合局部舍弃性，所以可以二分订单数量。</p></blockquote><h2 id="AC代码-12">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">ll r[MAXN],d_j[MAXN],s_j[MAXN],t_j[MAXN],diff[MAXN],need[MAXN],ans,n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(diff,<span class="number">0</span>,<span class="built_in">sizeof</span>(diff));</span><br><span class="line">    <span class="comment">//利用差分进行区间修改</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">        diff[s_j[i]]+=d_j[i];</span><br><span class="line">        diff[t_j[i]+<span class="number">1</span>]-=d_j[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用差分得到每天需要的教室数目</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        need[i]=need[i<span class="number">-1</span>]+diff[i];</span><br><span class="line">        <span class="comment">//看看每天的教室数目能否满足需求</span></span><br><span class="line">        <span class="keyword">if</span>(need[i]&gt;r[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;d_j[i]&gt;&gt;s_j[i]&gt;&gt;t_j[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以先判断是否能全部满足，如果能输出0</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(m))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>,right=m;</span><br><span class="line">    <span class="comment">//二分的是订单号，check的是每天的教室数目能否满足</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P4391</title>
      <link href="/2024/03/13/Luogu%20P4391/"/>
      <url>/2024/03/13/Luogu%20P4391/</url>
      
        <content type="html"><![CDATA[<h1 id="BOI2009-Radio-Transmission-无线传输">[BOI2009] Radio Transmission 无线传输</h1><blockquote><h2 id="题目描述">题目描述</h2><p>给你一个字符串 $s_1$，它是由某个字符串 $s_2$ 不断自我连接形成的（保证至少重复 $2$ 次）。但是字符串 $s_2$<br>是不确定的，现在只想知道它的最短长度是多少。</p><h2 id="输入格式">输入格式</h2><p>第一行一个整数 $L$，表示给出字符串的长度。</p><p>第二行给出字符串 $s_1$ 的一个子串，全由小写字母组成。</p><h2 id="输出格式">输出格式</h2><p>仅一行，表示 $s_2$ 的最短长度。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>8 cabcabca </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>3 </code></p><h2 id="提示">提示</h2><h4 id="样例输入输出-1-解释-对于样例，我们可以利用-texttt-abc-不断自我连接得到-texttt-abcabcabcabc-，读入的-texttt-cabcabca-，是它的子串。">样例输入输出 1 解释 对于样例，我们可以利用 $\texttt{abc}$ 不断自我连接得到 $\texttt{abcabcabcabc}$，读入的 $\texttt{cabcabca}$，是它的子串。</h4><h4 id="规模与约定-对于全部的测试点，保证-1-L-le-10-6-。">规模与约定 对于全部的测试点，保证 $1 &lt; L \le 10^6$。</h4></blockquote><p>按照题意，我们要求的是$s_2$的最短长度，也就是$s_1$最小的循环字串。<br>这里实际上有一个结论：答案就是$n-pmt[n-1]$。(可能有的结论是$n-pmt[n]$，只是因为下标是从1开始)<br>具体证明可以看这篇博客：（写得很清楚了）<br><a href="https://lyyy.blog.luogu.org/p4391-boi2009radio-transmission-wu-xian-zhuan-shu-ti-xie">大佬的详解</a><br>下面贴上代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n-pmt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充证明">补充证明</h2><p><img src="https://img-blog.csdnimg.cn/direct/444dc91cd4ed450f93fd37e51a114e9d.png#pic_center" alt="在这里插入图片描述"><br>上面的前后缀是$max(border)$。不妨记上面的前缀为$s_1$，下面的后缀为$s_2$。<br>我们可以发现<img src="https://img-blog.csdnimg.cn/direct/be681483c20c45ec91851a924eecfe1b.png#pic_center" alt="在这里插入图片描述"><br>箭头联系起来的各部分是相等的，也就是$s_1[1]=s_2[2]、s_1[2]=s_2[3]、s_1[3]=s_2[4]······$，由此类推。<br>同时，又因为$s_1[1]=s_2[1]、s_1[2]=s_2[2]、s_1[3]=s_2[3]······$，将两者联系起来，我们可以得到：<br>$$s_1[i]=s_2[j]|1&lt;=i&lt;=5，1&lt;=j&lt;=5$$<br>那有没有可能：更一般的情况是：$s_1$红色部分的后面加上一小段普通的字符串$t$。<br>我们可以分析一下：实际上这是可能的。我们可以结合样例进行分析。（这里不写了，样例的解释很清楚，可以认为：最后的循环节被强行切割了一部分。）<br>所以我们总结一下上面的内容：红色部分的字符串就是我们要求的最小循环节了。<br>所以问题转化为：求$max(border)$。<br>只需要求出$pmt[n-1]$即可，那么$n-pmt[n-1]$就是答案了。</p><h2 id="AC代码：">AC代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n-pmt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 929(Div.3)</title>
      <link href="/2024/03/13/Codeforces%20Round%20929(Div.3)/"/>
      <url>/2024/03/13/Codeforces%20Round%20929(Div.3)/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-A"><a href="https://codeforces.com/contest/1933/problem/A">Problem A</a></h1><h2 id="思路分析">思路分析</h2><p>直接累计各元素绝对值即可</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>)ans+=x;</span><br><span class="line">        <span class="keyword">else</span> ans-=x;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-B"><a href="https://codeforces.com/contest/1933/problem/B">Problem B</a></h1><h2 id="思路分析-2">思路分析</h2><p>两种操作：去除一个元素，或者某个元素+1。<br>其实可以发现，$sum$%$3$结果只有$0,1,2$.<br>$0：$直接输出0即可。<br>$1：$要不删去一个元素(其取模结果为1)，要不加2，所以可以用个$flag$，看看有没有这样的元素存在。<br>$2：$要不删去一个元素，要不加1，无所谓，都是两次操作。</p><h2 id="AC代码-2">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,flag=<span class="number">0</span>;cin&gt;&gt;n;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">1</span>)flag=<span class="number">1</span>;</span><br><span class="line">        sum+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">0</span>)cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">2</span>)cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-C"><a href="https://codeforces.com/contest/1933/problem/C">Problem C</a></h1><h2 id="思路分析-3">思路分析</h2><p>坐牢的开始qwq，自己想得太复杂了，其实直接用快速幂枚举$x,y$即可（看了队里大佬的代码）。<br>这里去重有个小技巧，可以用$set$，这样就可以不用写判断是否重复的条件（set可以直接去重），最后输出$set.size()$即可。</p><h2 id="AC代码-3">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickpower</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans*=a;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a*=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,l;cin&gt;&gt;a&gt;&gt;b&gt;&gt;l;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;<span class="built_in">quickpower</span>(a,x)&lt;=l;x++)&#123;</span><br><span class="line">        <span class="comment">//注意y的枚举条件是quickpower(a,x)*quickpower(b,y)&lt;=l</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>; <span class="built_in">quickpower</span>(a,x)*<span class="built_in">quickpower</span>(b,y)&lt;=l;y++)&#123;</span><br><span class="line">            <span class="type">int</span> num=<span class="built_in">quickpower</span>(a,x)* <span class="built_in">quickpower</span>(b,y);</span><br><span class="line">            <span class="keyword">if</span>(l%num==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//将l/num存入set中</span></span><br><span class="line">                s.<span class="built_in">insert</span>(l/num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-D"><a href="https://codeforces.com/contest/1933/problem/D">Problem D</a></h1><h2 id="思路分析-4">思路分析</h2><p>看看样例，可以大胆猜测一下，先从小到大排序，可以发现，$SmallElememt$%$BigElememt$肯定不为0，那么这样贪心排序下来，如果可以得到结果不为0，满足题意，直接$return$即可。<br>但是，需要特判是否有相同的情况，只需要考虑$a_0、a_1$即可，后面是否连续无影响，如果$a_0==a_1$，则不满足题意。</p><h2 id="AC代码-4">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//元素按照从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//特判</span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>]!=a[<span class="number">0</span>])&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">//如果%!=0，输出yes</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]%a[<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Problem-E"><a href="https://codeforces.com/contest/1933/problem/E">Problem E</a></h1><p>以后再补qwq</p>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 928(Div.4)</title>
      <link href="/2024/03/13/Codeforces%20Round%20928(Div.4)/"/>
      <url>/2024/03/13/Codeforces%20Round%20928(Div.4)/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-A"><a href="https://codeforces.com/contest/1926/problem/A">Problem A</a></h1><h2 id="思路分析">思路分析</h2><p>直接模拟即可</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;A&#x27;</span>)a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">5</span>-a)cout&lt;&lt;<span class="string">&quot;A\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;B\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-B"><a href="https://codeforces.com/contest/1926/problem/B">Problem B</a></h1><h2 id="思路分析-2">思路分析</h2><p>我的思路是：当统计每一行1的个数，当第$i$与第$i-1$行中统计到的1的个数（前提是这两行中1的个数不为0）不同时，就是三角形，否则是正方形。</p><p>一开始的时候WA了一次，就是没考虑到第$i$行与第$i+1$行中1的个数都得不为0</p><h2 id="WA代码">WA代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt_1</span><span class="params">(MAXN)</span></span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">&#x27;1&#x27;</span>)cnt_1[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">2</span>&amp;&amp;cnt_1[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt_1[i<span class="number">-1</span>]!=cnt_1[i])&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot;TRIANGLE\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;SQUARE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码-2">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt_1</span><span class="params">(MAXN)</span></span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">&#x27;1&#x27;</span>)cnt_1[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">2</span>&amp;&amp;cnt_1[i<span class="number">-1</span>]&amp;&amp;cnt_1[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt_1[i<span class="number">-1</span>]!=cnt_1[i])&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot;TRIANGLE\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;SQUARE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚写博客的时候想到可以改进一下，如果$flag==1$了，那么后面的输入其实都是没有意义的，也就不需要统计和判断了，修改如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt_1</span><span class="params">(MAXN)</span></span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n&amp;&amp;!flag;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">&#x27;1&#x27;</span>)cnt_1[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">2</span>&amp;&amp;cnt_1[i<span class="number">-1</span>]&amp;&amp;cnt_1[i]&amp;&amp;!flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt_1[i<span class="number">-1</span>]!=cnt_1[i])&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot;TRIANGLE\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;SQUARE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-C"><a href="https://codeforces.com/contest/1926/problem/C">Problem C</a></h1><h2 id="思路分析-3">思路分析</h2><p>其实是一个见过很多次的操作了qwq，先离线处理计算（没错，就是你想的暴力计算$qwq$）出所有在数据范围内的答案，然后用一个数组将其存下即可。这样可以做到$O(1)询问$，预处理时间是$O(MAXN)$，总的时间复杂度为$O(MAXN+n)$</p><h2 id="AC代码-3">AC代码</h2><p>具体细节看看代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(MAXN)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将x的各位数字拆解，并统计各位数字总和</span></span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        tot+=(x%<span class="number">10</span>);</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//直接输出计算好的ans[n]即可</span></span><br><span class="line">    cout&lt;&lt;ans[n]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;i++)&#123;</span><br><span class="line">        <span class="comment">//需要用前缀和数组存下来，因为后面有多次询问，所以需要对应记录哪个i，对应哪个ans[i]</span></span><br><span class="line">        ans[i]=ans[i<span class="number">-1</span>]+<span class="built_in">cal</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-D"><a href="https://codeforces.com/contest/1926/problem/D">Problem D</a></h1><h2 id="思路分析-4">思路分析</h2><p>题目的意思：将给的数字分成若干组，同一组中的若干个数字之间，他们的二进制形式的每一位必须都是不同的，求最小组数<br>我们可以先分析同一组中的数字有什么特点：<br><img src="https://img-blog.csdnimg.cn/direct/064ba75fccfd477c99803f52409a641e.png#pic_center" alt="在这里插入图片描述"><br>那么我们可以根据这个性质，来求解这道题了，具体还得看代码。</p><h2 id="AC代码-4">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LUOGU_RID: 148392530</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//book：输入的数字x的个数，可以理解为存放x的库</span></span><br><span class="line">    map&lt;ll,<span class="type">int</span>&gt; book;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        <span class="comment">//查看存放 x对应的异或数（记作y）的库 是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(book[((<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>)^x])&#123;</span><br><span class="line">            <span class="comment">//如果存在，那么book[y]的数量--</span></span><br><span class="line">            book[((<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>)^x]--;</span><br><span class="line">            <span class="comment">//说明可以创建出一组满组（也就是有x，y的组），ans++，统计一下</span></span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，book[x]++，说明x库中x的数量增加了一个</span></span><br><span class="line">        <span class="keyword">else</span> book[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再遍历一下无法找到 对应的y 的x，那么他们只能单独成组了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:book)&#123;</span><br><span class="line">        ans+=x.second;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-E"><a href="https://codeforces.com/contest/1926/problem/E">Problem E</a></h1><h2 id="思路分析-5">思路分析</h2><p>可以先模拟一下题目说的流程：<br><img src="https://img-blog.csdnimg.cn/direct/c675e02c15524d56a0222edca40eef9e.png#pic_center" alt="在这里插入图片描述"></p><h2 id="AC代码-5">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//注意得向上取整</span></span><br><span class="line">    <span class="keyword">while</span>(k&gt;(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="type">int</span> tot=(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        k-=tot;</span><br><span class="line">        <span class="comment">//注意总数/2</span></span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//轮数++</span></span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说实话，我也没太懂为什么是2*k-1</span></span><br><span class="line">    <span class="comment">//owo 我们每一次删除的时候删的是K*(1,3,5······)，所以这里2*k-1，才是对应删的奇数（K泛指系数）</span></span><br><span class="line">    cout&lt;&lt;((<span class="number">2</span>*k<span class="number">-1</span>)&lt;&lt;cnt)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Edu 162</title>
      <link href="/2024/03/13/Codeforces%20Edu%20162/"/>
      <url>/2024/03/13/Codeforces%20Edu%20162/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem-A"><a href="https://codeforces.com/contest/1923/problem/A">Problem A</a></h2><h3 id="思路分析">思路分析</h3><p>贪心，因为$chips$只能左移到最近的空格子，所以其实只需要考虑在最长的以1开头和以1结尾的串内（记作$s$）移动即可（其他部分没用，不然只会做多余的移动）。<br>至于怎么移，可以想象把从第一个1串右端的所有1串保持成串的形式，轮流滚近第一个1串，恰好接上为止，可以证明，滚的次数恰好就是$s$内0的个数。<br>画个图比较好理解：<br><img src="https://img-blog.csdnimg.cn/direct/52b551df24b94fe297337faaa27b22d7.png#pic_center" alt="在这里插入图片描述"><br>不难发现：答案就是$s$中0的个数，可以多结合几个样例分析一下。</p><h3 id="代码实现">代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l=MAXN,r,cnt=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="comment">//预处理出最长的$s$串的左右端点，注意l初始化为MAXN，并且统计出1的个数</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;    </span><br><span class="line">            r=i;</span><br><span class="line">            l=<span class="built_in">min</span>(l,i);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;r-l+<span class="number">1</span>-cnt&lt;&lt;<span class="string">&quot;\n&quot;</span>;<span class="comment">//求出0的个数，也就是最少的移动次数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-B"><a href="https://codeforces.com/contest/1923/problem/B">Problem B</a></h2><h3 id="思路分析-2">思路分析</h3><p>贪心，很显然，肯定是需要先打举例我们最近的怪物，再打次近的怪物，依此类推，只要在其中，有一个怪物打不死，那么我们就输了。<br>所以这里可以用到前缀和，预处理出前$i$个最近的怪物们的总血量（记作$pre[i]$），如果在对应的这段时间内，（也就是$abs(a[i].pos)$），我们打出的子弹数$k*abs(a[i].pos)&lt;pre[i]$，那么我们就输出$NO$直接判掉。<br>注意得先派个序，按距离从小到大，可以用结构体+$cmp$。</p><h3 id="代码实现-2">代码实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    ll hp,pos;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.pos)&lt;<span class="built_in">abs</span>(b.pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,k,ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="function">vector&lt;node&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i].hp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i].pos;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ans+=a[i].hp;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;k*<span class="built_in">abs</span>(a[i].pos))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-C"><a href="https://codeforces.com/contest/1923/problem/C">Problem C</a></h2><h3 id="思路分析-3">思路分析</h3><p>其实就是看能否根据给出的子数组，构造出一个好数组（被翻译坑了）。<br>怎么构造？？？总和相同，但是相同位置的元素不同，并且元素都大于0。<br>有一个比较容易实现的想法：就是在原有的基础上，部分元素加1，显然，有一些元素需要减少，但是又不能减太多（不然就小于0了）。<br>这其中就有一个比较特别的元素：1。1只能加，不能减，那么要加多少个1（记作$x$）就只能由其他非一元素（能够贡献的记作$y$）贡献了。</p><h3 id="代码实现-3">代码实现</h3><p>可以用前缀和，预处理出在各个区间内1的个数，以及各个区间内非一元素的最大贡献。<br>这里有用到一些小技巧：可以先在输入$a[i]$时，将$a[i]–$，这样求出来$sum[r]-sum[l-1]$就是$y$了。<br>需要注意特判一下：如果$l==r$，那么我们就无法构造出好数组（很显然）。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,q,l,r,tot;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">cnt</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">sum</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        a[i]--;</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+a[i];       <span class="comment">//预处理出前i个元素的最大贡献</span></span><br><span class="line">        cnt[i]=cnt[i<span class="number">-1</span>]+(a[i]==<span class="number">0</span>);  <span class="comment">//预处理出前i个元素中1的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        ll x=cnt[r]-cnt[l<span class="number">-1</span>];</span><br><span class="line">        ll y=sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(l==r||x&gt;y)cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;  <span class="comment">//无法满足或者长度为1，就NO，否则YES</span></span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Problem-D"><a href="https://codeforces.com/contest/1923/problem/D">Problem D</a></h2><h3 id="思路分析-4">思路分析</h3><p>分析题意，很容易想到$i-nd$史莱姆只能被左边的或者右边的吃掉，先分析左边的情况。<br>假设$i$（偷懒，其实是$i-nd$史莱姆，下面也一样）被左边的史莱姆吃掉，先做一些定义：<br>$ans[i]$：被吃掉的最小操作次数。<br>$l[i]$：第$i$个数字的上一个与$a[i]$不同的位置。<br>$left$：记录一个区间的左端点。</p><p>如果存在$left$，使得：<br>1、$[left,i-1]$区间的和&gt;$ans[i]$。<br>2、$[left,i-1]$区间数字种类$&gt;=2$（因为相同不能互相吞并，那么最少需两种大小不同的史莱姆）。<br>那么操作次数就是:$i-left$。</p><p>可以发现$i-1$其实是固定的（对于每一个$i$来说）,并且$left$越小，区间和越大，反之，区间和越小，所以想到可以用二分。<br>那么我们就需要用前缀和求出区间和，再用二分求出端点位置。</p><p>但是怎么判断$[left,i-1]$区间数字种类$&gt;=2$，这时候$l[i]$就派上用场了。<br>二分的左右端点分别为$left$（这里的$left$与上面的$left$无关，是完全不同的两个），$right$。中间值为$mid$。<br>如果$mid&gt;l[i-1]$，那么第二个条件就不成立（此时区间数字种类只有1）.</p><p>基本上就分析完了，但是如果是右边怎么办，我们只需要将数组反转即可。</p><h3 id="代码实现-4">代码实现</h3><p>一些细节可以看注释</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(MAXN)</span>,<span class="title">pre</span><span class="params">(MAXN)</span>,<span class="title">l</span><span class="params">(MAXN)</span>,<span class="title">ans</span><span class="params">(MAXN)</span>,<span class="title">b</span><span class="params">(MAXN)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">//其实跟下面的条件2判断一样，也就是前面的一段全都是同一个数字</span></span><br><span class="line">    <span class="comment">//思路是参考RegenFallen大佬的，但我感觉这一行不用加上去，因为不可能二分到位置为0，试了一下，删去也AC了，所以加不加无所谓</span></span><br><span class="line">    <span class="comment">//if(x&lt;=0)return 0;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//条件2：区间内数字种类小于2</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;l[i<span class="number">-1</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//条件1</span></span><br><span class="line">    <span class="keyword">if</span>(pre[i<span class="number">-1</span>]-pre[x<span class="number">-1</span>]&gt;a[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=l[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        b[n-i+<span class="number">1</span>]=a[i];    <span class="comment">//先反转，存起来</span></span><br><span class="line">        ans[i]=<span class="number">1e9</span>;       <span class="comment">//ans[i]先预处理为1e9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+a[i];         <span class="comment">//预处理出前缀和</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])l[i]=l[i<span class="number">-1</span>];  <span class="comment">//预处理出l[i],可以举几个例子：0333332222</span></span><br><span class="line">        <span class="keyword">else</span> l[i]=i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="comment">//特殊情况判断</span></span><br><span class="line">            ans[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll left=<span class="number">1</span>,right=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left+<span class="number">1</span>&lt;right)&#123;</span><br><span class="line">            ll mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid,i))left=mid;</span><br><span class="line">            <span class="keyword">else</span> right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右端点都得判，先判右，再判左，可以保证求出来ans[i]最小，并且有可能右端点不满足（check==false），所以左端点也必须得判断。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(right,i))ans[i]=<span class="built_in">min</span>(ans[i],i-right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">check</span>(left,i))ans[i]=<span class="built_in">min</span>(ans[i],i-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接下来就是相同的操作，但是注意ans数组的下标要反转</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=l[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])l[i]=l[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> l[i]=i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])&#123;</span><br><span class="line">            ans[n-i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll left=<span class="number">1</span>,right=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left+<span class="number">1</span>&lt;right)&#123;</span><br><span class="line">            ll mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid,i))left=mid;</span><br><span class="line">            <span class="keyword">else</span> right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(right,i))ans[n-i+<span class="number">1</span>]=<span class="built_in">min</span>(ans[n-i+<span class="number">1</span>],i-right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">check</span>(left,i))ans[n-i+<span class="number">1</span>]=<span class="built_in">min</span>(ans[n-i+<span class="number">1</span>],i-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;(ans[i]==<span class="number">1e9</span>?<span class="number">-1</span>:ans[i])&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-E"><a href="https://codeforces.com/contest/1923/problem/E">Problem E</a></h2><p>以后再补qwq</p>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CF1029A</title>
      <link href="/2024/03/13/CF1029A/"/>
      <url>/2024/03/13/CF1029A/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Many-Equal-Substrings">Many Equal Substrings</h1><h2 id="题面翻译">题面翻译</h2><p>题目描述：</p><p>你有一个字符串t，它由n个字母组成。</p><p>定义一个字符串s的子串为s[l…r]，表示从位置l到r构成的一个新的串。</p><p>你的目标是构造一个字符串s，使得它的可能长度最小，要求s中存在k个位置i,可以找到k个以i为出发点的子串t。</p><p>输入： 第一行输入两个整数n和k，表示t的长度和需要k个子串</p><p>第二行输入字符串t</p><p>输出：</p><p>输出满足条件的长度最小的s。题目保证答案唯一。</p><h2 id="题目描述">题目描述</h2><p>You are given a string $ t $ consisting of $ n $ lowercase Latin<br>letters and an integer number $ k $ .</p><p>Let’s define a substring of some string $ s $ with indices from $ l $<br>to $ r $ as $ s[l \dots r] $ .</p><p>Your task is to construct such string $ s $ of minimum possible length<br>that there are exactly $ k $ positions $ i $ such that $ s[i \dots i +<br>n - 1] = t $ . In other words, your task is to construct such string $<br>s $ of minimum possible length that there are exactly $ k $ substrings<br>of $ s $ equal to $ t $ .</p><p>It is guaranteed that the answer is always unique.</p><h2 id="输入格式">输入格式</h2><p>The first line of the input contains two integers $ n $ and $ k $ ( $<br>1 \le n, k \le 50 $ ) — the length of the string $ t $ and the number<br>of substrings.</p><p>The second line of the input contains the string $ t $ consisting of<br>exactly $ n $ lowercase Latin letters.</p><h2 id="输出格式">输出格式</h2><p>Print such string $ s $ of minimum possible length that there are<br>exactly $ k $ substrings of $ s $ equal to $ t $ .</p><p>It is guaranteed that the answer is always unique.</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>3 4 aba </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>ababababa </code></p><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><p><code>3 2 cat </code></p><h3 id="样例输出-2">样例输出 #2</h3><p><code>catcat </code></p></blockquote><p>看到这道题要求的答案，想到了熟悉的循环节问题，就从这入手吧。<br>还是先求出来$t$的最小的循环节（记作$p$），并根据$k$进行多次构造。</p><p>但是，通过样例一可以发现，构造出来的$s$可能不是恰好由整数个$p$构成。<br>看样例一，可以发现最后恰好是由$pmt[n-1]$构成。</p><p>根据题意，可以总结出：前面输出$k-1$个循环节，后面输出$t$即可。<br>因为前面的$k-1$个循环节首尾相连，已经是构成了$k-1$个$t$结构了。</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN],n,k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_pmt</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    <span class="built_in">get_pmt</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">length</span>()-pmt[s.<span class="built_in">length</span>()<span class="number">-1</span>];j++)&#123;</span><br><span class="line">            cout&lt;&lt;s[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CF45D</title>
      <link href="/2024/03/13/CF54D/"/>
      <url>/2024/03/13/CF54D/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Writing-a-Song">Writing a Song</h1><h2 id="题面翻译">题面翻译</h2><p><strong>题目大意</strong></p><p>求一个字符串s，满足该串长度为n，只出现字母表中前k个字母，并且在指定位置必须出现指定字符串p</p><p><strong>输入格式</strong></p><p>第一行 n，k。(n为所需字符串的长度 n&lt;=100，k为相应的字母大小 2&lt;=k&lt;=26)</p><p>第二行 p。（一个长度小于n，只包含字母表中前k个字母的字符串）</p><p>第三行 01串。（在第i个位置的数字1表示p的出现应该从s的第i个位置开始，而0表示从这里开始没有出现。）</p><p><strong>输出格式</strong></p><p>输出任意一个符合题意的字符串s</p><p>若无，输出“No solution”</p><h2 id="题目描述">题目描述</h2><p>One of the Hedgehog and his friend’s favorite entertainments is to<br>take some sentence or a song and replace half of the words (sometimes<br>even all of them) with each other’s names.</p><p>The friend’s birthday is approaching and the Hedgehog decided to make<br>a special present to his friend: a very long song, where his name will<br>be repeated many times. But try as he might, he can’t write a decent<br>song!</p><p>The problem is that the Hedgehog has already decided how long the<br>resulting sentence should be (i.e. how many letters it should contain)<br>and in which positions in the sentence the friend’s name should occur,<br>and it must not occur in any other position in the sentence. Besides,<br>the Hedgehog decided to limit himself to using only the first $ K $<br>letters of an English alphabet in this sentence (so it will be not<br>even a sentence, but one long word).</p><p>The resulting problem is indeed quite complicated, that’s why the<br>Hedgehog asks you to help him and write a program that will make the<br>desired word by the given name $ P $ , the length $ N $ of the<br>required word, the given positions of the occurrences of the name $ P<br>$ in the desired word and the alphabet’s size $ K $ . Note that the<br>occurrences of the name can overlap with each other.</p><h2 id="输入格式">输入格式</h2><p>The first line contains numbers $ N $ and $ K $ which are the length<br>of the required string and the alphabet size accordingly. The<br>limitations are: $ 1&lt;=N&lt;=100 $ , $ 2&lt;=K&lt;=26 $ .</p><p>The second line contains the name $ P $ which is a non-empty string<br>whose length does not exceed $ N $ characters. The string consists<br>only of the first $ K $ lowercase symbols of an English alphabet.</p><p>The third line contains the string of length $ N-length(P)+1 $ ,<br>consisting only of numbers zero and one. A number one in the $ i $ -th<br>position means that an occurrence of the name $ P $ should start from<br>$ i $ -th position of the desired word, while a zero means that there<br>is no occurrence starting here.</p><h2 id="输出格式">输出格式</h2><p>Print the desired word $ S $ . If there are several answers, print any<br>of them.</p><p>If there is no solution, then print “No solution”.</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>5 2 aba 101 </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>ababa </code></p><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><p><code>5 2 a 10001 </code></p><h3 id="样例输出-2">样例输出 #2</h3><p><code>abbba </code></p><h2 id="样例-3">样例 #3</h2><h3 id="样例输入-3">样例输入 #3</h3><p><code>6 2 abba 101 </code></p><h3 id="样例输出-3">样例输出 #3</h3><p><code>No solution </code></p></blockquote><p>可怕的构造题，不会qwq，只能看题解区大佬了（大佬讲得很清楚）：<br><a href="https://www.luogu.com.cn/problem/solution/CF54D">https://www.luogu.com.cn/problem/solution/CF54D</a><br>构造这方面得加强qwq，贴上AC代码：</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    string p;</span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> lenp=p.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> lens=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;lenp;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i+j]&amp;&amp;ans[i+j]!=p[j])&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;No solution\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[i+j]=p[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;lenp;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i+j]&amp;&amp;ans[i+j]!=p[j])<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==lenp)&#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;lenp;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!ans[i+j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(p[j]==<span class="string">&#x27;a&#x27;</span>)ans[i+j]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                        <span class="keyword">else</span> ans[i+j]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==lenp)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;No solution\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ans[i])ans[i]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感觉还是得多想想特殊情况：<br>1、搜索1的时候：有没有重复占位，也就是$ans[i+j]$存在，并且$ans[i+j]!=p[j]$，如果存在，说明该位已经被占领了，直接$No$ $solution$。<br>2、搜索0的时候：看看有没有$ans[i+j]$存在，并且$ans[i+j]!=p[j]$，如果存在，则该位构造成功，直接$break$，不用做重复的判断。<br>3、如果2的情况没有发生，我们发现这里实际上只有两种情况（与上面相对应）：$ans[i+j]==0$ $or$ $ans[i+j]==p[j]$。第二种情况已经没办法改变了（因为我们在上面的构造时已经确定$ans[i+j]==p[j]$），那么我们只能改变第一种情况，看看$s[j]$是什么，那么$ans[i+j]$构造时只需要注意不等于$s[j]$即可（这里情况一存在的话，可以直接构造后$break$掉，提高一点效率，后面输出时再简单构造即可）。<br>4、如果情况一也没有发生呢？？？很不幸，那就只能$No$ $solution$了。</p>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CF126B</title>
      <link href="/2024/03/13/CF126B/"/>
      <url>/2024/03/13/CF126B/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Password">Password</h1><h2 id="题面翻译">题面翻译</h2><p>Asterix，Obelix 和他们的临时伙伴 Suffix、Prefix 已经最终找到了和谐寺。然而和谐寺大门紧闭，就连 Obelix<br>的运气也没好到能打开它。</p><p>不久他们发现了一个字符串 $S\ (1\leqslant\vert<br>S\vert\leqslant1000000)$，刻在和谐寺大门下面的岩石上。Asterix<br>猜想那一定是打开寺庙大门的密码，于是就大声将字符串朗读了出来，然而并没有什么事发生。于是 Asterix 又猜想密码一定是字符串 $S$<br>的子串 $T$。</p><p>Prefix 认为 $T$ 是 $S$ 的前缀，Suffix 认为 $T$ 是 $S$ 的后缀，Obelix 却认为 $T$ 应该是 $S$<br>中的某一部分，也就是说，$T$ 既不是 $S$ 的前缀，也不是 $S$ 的后缀。</p><p>Asterix 选择子串 $T$ 来满足所有伙伴们的想法。同时，在所有可以被接受的子串变形中，Asterix 选择了最长的一个。当<br>Asterix 大声读出子串 $T$ 时，寺庙的大门开了。（也就是说，你需要找到既是 $S$ 的前缀又是 $S$ 的后缀同时又在 $S$<br>中间出现过的最长子串）</p><p>现在给你字符串 $S$，你需要找到满足上述要求的子串 $T$。</p><h3 id="输入格式">输入格式</h3><p>一行一个只包含小写字母的字符串 $S$。</p><h3 id="输出格式">输出格式</h3><p>输出子串 $T$，如果 $T$ 不存在，输出 <code>Just a legend</code>。</p><h2 id="题目描述">题目描述</h2><p>Asterix, Obelix and their temporary buddies Suffix and Prefix has<br>finally found the Harmony temple. However, its doors were firmly<br>locked and even Obelix had no luck opening them.</p><p>A little later they found a string $ s $ , carved on a rock below the<br>temple’s gates. Asterix supposed that that’s the password that opens<br>the temple and read the string aloud. However, nothing happened. Then<br>Asterix supposed that a password is some substring $ t $ of the string<br>$ s $ .</p><p>Prefix supposed that the substring $ t $ is the beginning of the<br>string $ s $ ; Suffix supposed that the substring $ t $ should be the<br>end of the string $ s $ ; and Obelix supposed that $ t $ should be<br>located somewhere inside the string $ s $ , that is, $ t $ is neither<br>its beginning, nor its end.</p><p>Asterix chose the substring $ t $ so as to please all his companions.<br>Besides, from all acceptable variants Asterix chose the longest one<br>(as Asterix loves long strings). When Asterix read the substring $ t $<br>aloud, the temple doors opened.</p><p>You know the string $ s $ . Find the substring $ t $ or determine that<br>such substring does not exist and all that’s been written above is<br>just a nice legend.</p><h2 id="输入格式-2">输入格式</h2><p>You are given the string $ s $ whose length can vary from $ 1 $ to $<br>10^{6} $ (inclusive), consisting of small Latin letters.</p><h2 id="输出格式-2">输出格式</h2><p>Print the string $ t $ . If a suitable $ t $ string does not exist,<br>then print “Just a legend” without the quotes.</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>fixprefixsuffix </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>fix </code></p><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><p><code>abcdabc </code></p><h3 id="样例输出-2">样例输出 #2</h3><p><code>Just a legend </code></p></blockquote><p>看到这题的第一眼，想到的肯定是KMP（因为需要求最长公共前后缀嘛，将其记作$t$，母串记作$s$）。<br>但是，$t$还需要是$s$的中间部分，这个怎么办？？？<br>我们可以将它转化为熟悉的问题，画个图解释一下：<br><img src="https://img-blog.csdnimg.cn/direct/3fa1ee27e9eb4e6d8580999418d6f7b0.png#pic_center" alt="在这里插入图片描述">这样就一目了然了吧，$t$也是中间的橙色串的最长前后缀，这就转化成了我们熟悉的问题。</p><p>那么我们只要$2$遍历到$n-2$，只要$pmt[i]==pmt[n-1]$，那么我们就找到最长的$t$了。</p><p>但是，实际上可能是找不到的（看题意就知道了），如果$pmt[n-1]$比$max(pmt[i])$还大，所以这时$t$的长度就得缩小了（也就是不断地往回跳：$pmt[pmt[n-1]]$，$pmt[pmt[pmt[n-1]]]······$，直到小于$max(pmt[i])$，注意$i&lt;=n-2$）。</p><p>可能有点混乱，将上述的步骤总结一下：<br>1、先预处理出$max(pmt[i])，i&lt;=n-2$。<br>2、判断$pmt[n-1]$与$max(pmt[i])$的大小关系，如果$pmt[n-1]&gt;=max(pmt[i])$，就得往回跳，直到小于$max(pmt[i])$为止（记作$len$吧)，当然有可能跳到0，那么这时候就无解了。<br>3、如果有解，那么我们只需要输出$0$~$len-1$即可，毕竟$len$是字符串的长度。</p><p>我们可以在第二步开始前加上特判$pmt[n-1]==0$是否成立，如果成立，就说明前后缀不同，肯定无解。</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN],maxn;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_pmt</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">        <span class="keyword">if</span>(i!=s.<span class="built_in">length</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            maxn=<span class="built_in">max</span>(maxn,pmt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="built_in">get_pmt</span>(s);</span><br><span class="line">    <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> len=pmt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Just a legend\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(len&gt;maxn)&#123;</span><br><span class="line">            len=pmt[len<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Just a legend\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                cout&lt;&lt;s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA1328</title>
      <link href="/2024/03/13/UVA1328/"/>
      <url>/2024/03/13/UVA1328/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Period">Period</h1><h2 id="题面翻译">题面翻译</h2><p>对于给定字符串 $S$<br>的每个前缀，我们想知道它是否为周期串（周期串定义为由若干最小循环节拼接而成的字符串），若是，输出前缀长度和循环节数量。</p><p><strong>【输入格式】</strong></p><p>多组数据，每组数据第一行一个整数 $n$，表示字符串 $s$ 的长度，若 $n=0$ 则结束输入。</p><p>若 $n\ne0$，则第二行一个字符串 $S$，如题意。</p><p><strong>【输出格式】</strong></p><p>对于第 $i$ 组输出，第一行一个字符串 <code>Test case #i</code>。</p><p>之后若干行一行两个整数，表示如果字符串 $S$ 的一个前缀是周期串，它的长度和循环节数量（注意这里的循环节是指<strong>长度最小的</strong>循环节）。</p><p>之后再空一行。</p><p><strong>【说明】</strong></p><p>$n\leq10^6$，字符串 $S$ 均由小写字母构成。</p><h2 id="题目描述">题目描述</h2><p><a href="https://uva.onlinejudge.org/external/13/p1328.pdf">PDF</a></p><h2 id="输入格式">输入格式</h2><h2 id="输出格式">输出格式</h2><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>3 aaa 12 aabaabaabaab 0 </code></p><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight plaintext"><figcaption><span>case #1 2 2 3 3</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Test case #2 2 2 6 2 9 3 12 4 ```</span><br><span class="line"></span><br><span class="line">还是熟悉的最小循环节问题，需要注意的是，前缀长度需要大于1，所以需要从2开始判断，最大前缀长度就是$S$的长度。</span><br><span class="line"></span><br><span class="line">判断有没有循环节，看$pmt[i-1]$是否存在，计算循环节数量，看$n$%$(n-pmt[n-1])$是否等于0（因为$S$的前缀串$t$需要作为周期串）。</span><br><span class="line"></span><br><span class="line">每个测试点之间的空行特判一下即可，看$i==len$是否成立。</span><br><span class="line"></span><br><span class="line">## AC代码</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using ll=long long;</span><br><span class="line">const int MAXN=1e6+10;</span><br><span class="line">int pmt[MAXN],n,cnt;</span><br><span class="line">string s;</span><br><span class="line">void get_pmt(const string&amp; s)&#123;</span><br><span class="line">   for(int i=1,j=0;i&lt;s.length();i++)&#123;</span><br><span class="line">       while(j&amp;&amp;s[i]!=s[j])j=pmt[j-1];</span><br><span class="line">       if(s[i]==s[j])j++;</span><br><span class="line">       pmt[i]=j;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   ios::sync_with_stdio(0),cin.tie(0);</span><br><span class="line">   while(1)&#123;</span><br><span class="line">       cin&gt;&gt;n;</span><br><span class="line">       if(n==0)break;</span><br><span class="line">       cin&gt;&gt;s;</span><br><span class="line">       int len=s.length();</span><br><span class="line">       memset(pmt,0,sizeof(pmt));</span><br><span class="line">       get_pmt(s);</span><br><span class="line">       cout&lt;&lt;&quot;Test case #&quot;&lt;&lt;++cnt&lt;&lt;&quot;\n&quot;;</span><br><span class="line">       for(int i=2;i&lt;=len;i++)&#123;</span><br><span class="line">           if(pmt[i-1]&amp;&amp;i%(i-pmt[i-1])==0)&#123;</span><br><span class="line">               cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;i/(i-pmt[i-1])&lt;&lt;&quot;\n&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">           if(i==len)&#123;</span><br><span class="line">               cout&lt;&lt;&quot;\n&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA10298</title>
      <link href="/2024/03/13/UVA10298/"/>
      <url>/2024/03/13/UVA10298/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Power-Strings">Power Strings</h1><h2 id="题面翻译">题面翻译</h2><h3 id="题意简述：">题意简述：</h3><p>求一个字符串由多少个重复的子串连接而成。</p><p>例如 <code>ababab</code> 由三个 <code>ab</code> 连接而成，<code>abcd</code> 由 <code>abcd</code> 由一个 <code>abcd</code> 连接而成。</p><h3 id="输入格式">输入格式</h3><p><strong>本题多组数据</strong>。</p><p>每一组数据仅有一行，这一行仅有一个字符串 $s$。</p><p>输入的结束标志为一个 <code>.</code>。</p><h3 id="输出格式">输出格式</h3><p>对于每一组数据，输出这组字符串由多少个重复的子串连接而成。</p><h3 id="说明-提示">说明/提示</h3><p>$1\le |s|\le 10^6$。</p><h2 id="题目描述">题目描述</h2><p><a href="https://uva.onlinejudge.org/external/102/p10298.pdf">PDF</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5a89b1b5be26ca2d032d51c4fc5e18d2.png" alt=""></p><h2 id="输入格式-2">输入格式</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/aa5c61819fa5b54135f8b7236af00a7e.png" alt=""></p><h2 id="输出格式-2">输出格式</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/795c5ef49846eb46a838271a5812fff1.png" alt=""></p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>abcd aaaa ababab . </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>1 4 3 </code></p></blockquote><p>其实方法还是一样的，求出最短的循环节(记作$p$)，也就是$n-pmt[n-1]$，然后就是$n/(n-pmt[n-1])$。<br>但是，这里需要注意的是：$s$可能不是由整数个$p$构成的，可能存在最后的$p$被切割的情况。（一开始没考虑到这点，看了题解才反应过来）。<br>那么这里就需要进行特叛了：如果$n$%$(n-pmt[n-1])==0$，说明恰好整除，那么$n/(n-pmt[n-1])$就是答案了。<br>如果$n$%$(n-pmt[n-1])!=0$，那么只能以$s$自身作为循环节了，答案也就是1。<br>具体的证明可以看看评论区的大佬，写的很好：<a href="https://www.luogu.com.cn/blog/hzz/solution-uva10298">https://www.luogu.com.cn/blog/hzz/solution-uva10298</a></p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_pmt</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="built_in">getline</span>(cin,s);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()==<span class="number">1</span>&amp;&amp;s[<span class="number">0</span>]==<span class="string">&#x27;.&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">get_pmt</span>(s);</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(n%(n-pmt[n<span class="number">-1</span>])==<span class="number">0</span>)cout&lt;&lt;n/(n-pmt[n<span class="number">-1</span>])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><p>因为这道题目是有多个数据输入，且一行一个$s$，所以我们可以用$getlin(cin,s)$，只需要当$s$为&quot;$.$&quot;时结束即可。</p><h2 id="结论总结：">结论总结：</h2><p>设字符串的长度为$n$，最长相同前后缀的长度为$pmt[n-1]$。如果$n$%$(n-pmt[n-1])==0$，则答案为$n/(n-pmt[n-1])$，否则为1。</p>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3375</title>
      <link href="/2024/03/13/Luogu%20P3375/"/>
      <url>/2024/03/13/Luogu%20P3375/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="【模板】KMP">【模板】KMP</h1><h2 id="题目描述">题目描述</h2><p>给出两个字符串 $s_1$ 和 $s_2$，若 $s_1$ 的区间 $[l, r]$ 子串与 $s_2$ 完全相同，则称 $s_2$ 在<br>$s_1$ 中出现了，其出现位置为 $l$。   现在请你求出 $s_2$ 在 $s_1$ 中所有出现的位置。</p><p>定义一个字符串 $s$ 的 border 为 $s$ 的一个<strong>非 $s$ 本身</strong>的子串 $t$，满足 $t$ 既是 $s$ 的前缀，又是<br>$s$ 的后缀。   对于 $s_2$，你还需要求出对于其每个前缀 $s’$ 的最长 border $t’$ 的长度。</p><h2 id="输入格式">输入格式</h2><p>第一行为一个字符串，即为 $s_1$。   第二行为一个字符串，即为 $s_2$。</p><h2 id="输出格式">输出格式</h2><p>首先输出若干行，每行一个整数，<strong>按从小到大的顺序</strong>输出 $s_2$ 在 $s_1$ 中出现的位置。   最后一行输出 $|s_2|$<br>个整数，第 $i$ 个整数表示 $s_2$ 的长度为 $i$ 的前缀的最长 border 长度。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>ABABABC ABA </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>1 3 0 0 1 </code></p><h2 id="提示">提示</h2><h3 id="样例-1-解释">样例 1 解释</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3c98caa2ee905bfada0eb2516ba7b8cc.png" alt="">。<br>对于 $s_2$ 长度为 $3$ 的前缀 <code>ABA</code>，字符串 <code>A</code> 既是其后缀也是其前缀，且是最长的，因此最长 border 长度为<br>$1$。</p><h3 id="数据规模与约定">数据规模与约定</h3><p><strong>本题采用多测试点捆绑测试，共有 3 个子任务</strong>。</p><ul><li>Subtask 1（30 points）：$|s_1| \leq 15$，$|s_2| \leq 5$。</li><li>Subtask 2（40 points）：$|s_1| \leq 10^4$，$|s_2| \leq 10^2$。</li><li>Subtask 3（30 points）：无特殊约定。</li></ul><p>对于全部的测试点，保证 $1 \leq |s_1|,|s_2| \leq 10^6$，$s_1, s_2$ 中均只含大写英文字母。</p></blockquote><p>这道题就是妥妥的KMP模板题，具体原理可以参考知乎Pecco大佬的文章，链接贴上：<a href="https://zhuanlan.zhihu.com/p/105629613">https://zhuanlan.zhihu.com/p/105629613</a></p><p>需要注意的一点是：Pecco大佬的KMP写法与我所看到的大部分写法有细节上的不同，所以做题的时候，如果打算用Pecco大佬的码作为模板，你需要经常琢磨到底哪一点需要修改，就当是锻炼自己是否真正理解了KMP算法吧。</p><h2 id="AC代码">AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;  </span><br><span class="line"><span class="type">int</span> pmt[MAXN];  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_pmt</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];  </span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;  </span><br><span class="line">        pmt[i]=j;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> string &amp;s,<span class="type">const</span> string &amp;p)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j])j=pmt[j<span class="number">-1</span>];  </span><br><span class="line">        <span class="keyword">if</span>(s[i]==p[j])j++;  </span><br><span class="line">        <span class="keyword">if</span>(j==p.<span class="built_in">length</span>())&#123;  </span><br><span class="line">            cout&lt;&lt;i-j+<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;  </span><br><span class="line">            j=pmt[j<span class="number">-1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  </span><br><span class="line">    string s,p;  </span><br><span class="line">    cin&gt;&gt;s&gt;&gt;p;  </span><br><span class="line">    <span class="built_in">get_pmt</span>(p);  </span><br><span class="line">    <span class="built_in">kmp</span>(s,p);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">length</span>();i++)&#123;  </span><br><span class="line">        cout&lt;&lt;pmt[i]&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3435</title>
      <link href="/2024/03/12/Luogu%20P3435/"/>
      <url>/2024/03/12/Luogu%20P3435/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="POI2006-OKR-Periods-of-Words">[POI2006] OKR-Periods of Words</h1><blockquote><h2 id="题面翻译">题面翻译</h2><p>对于一个仅含小写字母的字符串 $a$，$p$ 为 $a$ 的前缀且 $p\ne a$，那么我们称 $p$ 为 $a$ 的 proper<br>前缀。</p><p>规定字符串 $Q$ 表示 $a$ 的周期，当且仅当 $Q$ 是 $a$ 的 proper 前缀且 $a$ 是 $Q+Q$<br>的前缀。若这样的字符串不存在，则 $a$ 的周期为空串。</p><p>例如 <code>ab</code> 是 <code>abab</code> 的一个周期，因为 <code>ab</code> 是 <code>abab</code> 的 proper 前缀，且 <code>abab</code> 是 <code>ab+ab</code><br>的前缀。</p><p>求给定字符串所有前缀的最大周期长度之和。</p><h2 id="题目描述">题目描述</h2><p>A string is a finite sequence of lower-case (non-capital) letters of<br>the English alphabet. Particularly, it may be an empty sequence, i.e.<br>a sequence of 0 letters. By A=BC we denotes that A is a string<br>obtained by concatenation (joining by writing one immediately after<br>another, i.e. without any space, etc.) of the strings B and C (in this<br>order). A string P is a prefix of the string !, if there is a string<br>B, that A=PB. In other words, prefixes of A are the initial fragments<br>of A. In addition, if P!=A and P is not an empty string, we say, that<br>P is a proper prefix of A.</p><p>A string Q is a period of Q, if Q is a proper prefix of A and A is a<br>prefix (not necessarily a proper one) of the string QQ. For example,<br>the strings abab and ababab are both periods of the string abababa.<br>The maximum period of a string A is the longest of its periods or the<br>empty string, if A doesn’t have any period. For example, the maximum<br>period of ababab is abab. The maximum period of abc is the empty<br>string.</p><p>Task Write a programme that:</p><p>reads from the standard input the string’s length and the string<br>itself,calculates the sum of lengths of maximum periods of all its<br>prefixes,writes the result to the standard output.</p><h2 id="输入格式">输入格式</h2><p>In the first line of the standard input there is one integer $k$<br>($1\le k\le 1\ 000\ 000$) - the length of the string. In the following<br>line a sequence of exactly $k$ lower-case letters of the English<br>alphabet is written - the string.</p><h2 id="输出格式">输出格式</h2><p>In the first and only line of the standard output your programme<br>should write an integer - the sum of lengths of maximum periods of all<br>prefixes of the string given in the input.</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>8 babababa </code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>24 </code></p></blockquote><p>先理解清楚题意：proper前缀可以配合下图理解<br><img src="https://img-blog.csdnimg.cn/direct/2c12d9db942e46608af09d0f84a0255d.png#pic_center" alt="在这里插入图片描述"><br>这里我们不难看出：abcabcab的最长proper字串为abcabc，长度是6。<br>记原来的字符串为$s$，proper子串为$t$。<br>想想看，如果是要使得proper字串最长，那么恰好就是$len(s)-min(border)$。<br>我们可以大致感受一下，如果$border$越大，那么对应的$len(t)$越小，可以结合上面的例子。<br>那么我们的问题就变成了怎么求最小的$border$。<br>问题是，在KMP算法中，$pmt$求出来的是$max(border)$。<br>我们可以利用KMP算法的一个性质：$pmt[i]、pmt[pnt[i]]、pmt[pmt[pmt[i]]]······$<br>直到为0，以上这些都是$s$的$border$的长度，并且越来越小。<br>利用这个性质，我们就可以求出来$min(border)$。</p><p>因为题目是求所有前缀的最大周期长度之和，所以我们令$j=i+1$。（因为我个人的KMP写得比较奇怪，题解区的大佬是令$j=i$）。然后在$j&gt;0$的情况下不断令$j=pmt[j-1]$，直到$j$最小为止。此时$ans+=i-j+1$。<br>这里有一个技巧：当$j$求出来后，令$pmt[i]=j$，相当于记忆化，否则可能会T。</p><p>思路参考：<a href="https://www.luogu.com.cn/problem/solution/P3435">https://www.luogu.com.cn/problem/solution/P3435</a></p><p>贴一下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_pmt</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="built_in">get_pmt</span>(s);</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        j=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pmt[j<span class="number">-1</span>])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pmt[i])pmt[i]=j;</span><br><span class="line">        ans+=i-j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蒟蒻的ACM之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
