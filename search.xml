<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Blog</title>
      <link href="/2024/03/06/Blog/"/>
      <url>/2024/03/06/Blog/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="boi2009-radio-transmission-无线传输">[BOI2009] RadioTransmission 无线传输</h1><h2 id="题目描述">题目描述</h2><p>给你一个字符串 <spanclass="math inline">\(s_1\)</span>，它是由某个字符串 <spanclass="math inline">\(s_2\)</span> 不断自我连接形成的（保证至少重复<span class="math inline">\(2\)</span> 次）。但是字符串 <spanclass="math inline">\(s_2\)</span>是不确定的，现在只想知道它的最短长度是多少。</p><h2 id="输入格式">输入格式</h2><p>第一行一个整数 <spanclass="math inline">\(L\)</span>，表示给出字符串的长度。</p><p>第二行给出字符串 <span class="math inline">\(s_1\)</span>的一个子串，全由小写字母组成。</p><h2 id="输出格式">输出格式</h2><p>仅一行，表示 <span class="math inline">\(s_2\)</span>的最短长度。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><p><code>8 cabcabca</code></p><h3 id="样例输出-1">样例输出 #1</h3><p><code>3</code></p><h2 id="提示">提示</h2><h4id="样例输入输出-1-解释-对于样例我们可以利用-textttabc-不断自我连接得到-textttabcabcabcabc读入的-textttcabcabca是它的子串">样例输入输出1 解释 对于样例，我们可以利用 <spanclass="math inline">\(\texttt{abc}\)</span> 不断自我连接得到 <spanclass="math inline">\(\texttt{abcabcabcabc}\)</span>，读入的 <spanclass="math inline">\(\texttt{cabcabca}\)</span>，是它的子串。</h4><h4 id="规模与约定-对于全部的测试点保证-1-l-le-106">规模与约定对于全部的测试点，保证 <span class="math inline">\(1 &lt; L \le10^6\)</span>。</h4></blockquote><p>按照题意，我们要求的是<spanclass="math inline">\(s_2\)</span>的最短长度，也就是<spanclass="math inline">\(s_1\)</span>最小的循环字串。这里实际上有一个结论：答案就是<spanclass="math inline">\(n-pmt[n-1]\)</span>。(可能有的结论是<spanclass="math inline">\(n-pmt[n]\)</span>，只是因为下标是从1开始)具体证明可以看这篇博客：（写得很清楚了） <ahref="https://lyyy.blog.luogu.org/p4391-boi2009radio-transmission-wu-xian-zhuan-shu-ti-xie">大佬的详解</a>下面贴上代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n-pmt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充证明">补充证明</h2><p><imgsrc="https://img-blog.csdnimg.cn/direct/444dc91cd4ed450f93fd37e51a114e9d.png#pic_center"alt="在这里插入图片描述" /> 上面的前后缀是<spanclass="math inline">\(max(border)\)</span>。不妨记上面的前缀为<spanclass="math inline">\(s_1\)</span>，下面的后缀为<spanclass="math inline">\(s_2\)</span>。 我们可以发现<imgsrc="https://img-blog.csdnimg.cn/direct/be681483c20c45ec91851a924eecfe1b.png#pic_center"alt="在这里插入图片描述" /> 箭头联系起来的各部分是相等的，也就是<spanclass="math inline">\(s_1[1]=s_2[2]、s_1[2]=s_2[3]、s_1[3]=s_2[4]······\)</span>，由此类推。同时，又因为<spanclass="math inline">\(s_1[1]=s_2[1]、s_1[2]=s_2[2]、s_1[3]=s_2[3]······\)</span>，将两者联系起来，我们可以得到：<spanclass="math display">\[s_1[i]=s_2[j]|1&lt;=i&lt;=5，1&lt;=j&lt;=5\]</span>那有没有可能：更一般的情况是：<spanclass="math inline">\(s_1\)</span>红色部分的后面加上一小段普通的字符串<spanclass="math inline">\(t\)</span>。我们可以分析一下：实际上这是可能的。我们可以结合样例进行分析。（这里不写了，样例的解释很清楚，可以认为：最后的循环节被强行切割了一部分。）所以我们总结一下上面的内容：红色部分的字符串就是我们要求的最小循环节了。所以问题转化为：求<span class="math inline">\(max(border)\)</span>。只需要求出<span class="math inline">\(pmt[n-1]\)</span>即可，那么<spanclass="math inline">\(n-pmt[n-1]\)</span>就是答案了。</p><h2 id="ac代码">AC代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=s[j])j=pmt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pmt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n-pmt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
